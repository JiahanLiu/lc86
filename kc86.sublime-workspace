{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"CLK",
				"CLK_NOT"
			],
			[
				"CS_DR",
				"CS_DR1_D2"
			],
			[
				"WB_F",
				"WB_Final_DR1"
			],
			[
				"cmps",
				"cmps_pointer_updated"
			],
			[
				"WB",
				"WB_RESULT_B_next"
			],
			[
				"cmps_de",
				"cmps_dec_pointer"
			],
			[
				"cmps_in",
				"cmps_inc_pointer"
			],
			[
				"check_opB_",
				"check_opB_uop2"
			],
			[
				"check_opA_uop",
				"check_opA_uop2"
			],
			[
				"check_opA_u",
				"check_opA_uop1"
			],
			[
				"WB_RESUL",
				"WB_RESULT_C"
			],
			[
				"WB_RESU",
				"WB_RESULT_C"
			],
			[
				"WB_Fina",
				"WB_Final_CS"
			],
			[
				"v_",
				"v_cs_ld_cs"
			],
			[
				"WB_de",
				"WB_de_datasize_all"
			],
			[
				"and",
				"and_flags_bottom"
			],
			[
				"and_fla",
				"and_flags_top"
			],
			[
				"inter",
				"interrupt_flags"
			],
			[
				"rep",
				"repne_second_uop_cmps"
			],
			[
				"CS_ISC",
				"CS_IS_CMPS_SECOND_UOP_ALL"
			],
			[
				"int",
				"internal_carry_out"
			],
			[
				"car",
				"carry_out"
			],
			[
				"internal_ca",
				"internal_carry_out"
			],
			[
				"intern",
				"internal_sum"
			],
			[
				"EX_de_repne_wb",
				"EX_de_repne_wb_out"
			],
			[
				"data1",
				"data1_64"
			],
			[
				"CF",
				"CF_dataforwarded"
			],
			[
				"AF",
				"AF_dataforwarded"
			],
			[
				"leftover",
				"leftover16"
			],
			[
				"left",
				"leftover8"
			],
			[
				"lef",
				"leftover32"
			],
			[
				"AL",
				"AL_part2"
			],
			[
				"low",
				"low_needs_daa"
			],
			[
				"CF_part",
				"CF_part2"
			],
			[
				"low_",
				"low_needs_daa"
			],
			[
				"carry",
				"carry_low"
			],
			[
				"add",
				"adder32"
			],
			[
				"high_",
				"high_needs_daa"
			],
			[
				"In",
				"In_write_ready_not"
			],
			[
				"WB_MM",
				"WB_Final_MM_Data"
			],
			[
				"ld",
				"wb_ld_eip"
			],
			[
				"v_cs",
				"v_cs_ld_seg"
			],
			[
				"shift",
				"shift_results"
			],
			[
				"EX_MM",
				"EX_MM_B"
			],
			[
				"MM_",
				"EX_MM_A"
			],
			[
				"PAD",
				"PADDSW"
			],
			[
				"PSHU",
				"PSHUFW_result"
			],
			[
				"PADDS",
				"PADDSW_result"
			],
			[
				"MM",
				"MM_B"
			],
			[
				"PADD",
				"PADDD_result"
			],
			[
				"alu",
				"alu64_results"
			],
			[
				"pos",
				"positive_sat_1"
			],
			[
				"right",
				"right_flags"
			],
			[
				"shift_ar",
				"shift_arithmetic_right_w_flags"
			],
			[
				"CS_IS_",
				"CS_IS_HALT_WB"
			],
			[
				"CS_IS",
				"CS_IS_CMPS_SECOND_UOP_ALL"
			],
			[
				"wb_ld",
				"wb_ld_gpr1"
			],
			[
				"wb",
				"wb_ld_gpr1"
			],
			[
				"CS_ISJ",
				"CS_IS_JNBE_WB"
			],
			[
				"cf",
				"cf_zf_equal_zero"
			],
			[
				"WB_",
				"WB_RESULT_MM_next"
			],
			[
				"alu32",
				"alu32_flags"
			],
			[
				"CS_MUX_",
				"CS_MUX_SP_POP_EX"
			],
			[
				"EX",
				"EX_de_datasize_all"
			],
			[
				"choseb",
				"choose_b_as_a_signal"
			],
			[
				"WB_RES",
				"WB_RESULT_B_next"
			],
			[
				"choose",
				"choose_a_as_b_signal"
			],
			[
				"post",
				"post_mux_a"
			],
			[
				"post_mu",
				"post_mux_a"
			],
			[
				"CS_MUX",
				"CS_MUX_FUNCTION_UNIT_EX"
			],
			[
				"post_mux_",
				"post_mux_c"
			],
			[
				"mux",
				"mux32_2way"
			],
			[
				"shif",
				"shift_xchg_result"
			],
			[
				"post_mux",
				"post_mux_functional_unit"
			],
			[
				"CS_IS_CMP",
				"CS_IS_CMPXCHG_EX"
			],
			[
				"CS_IS_C",
				"CS_IS_CMPXCHG_EX"
			],
			[
				"v_ex",
				"v_ex_ld_gpr1"
			],
			[
				"CS_IS_CM",
				"CS_IS_CMPS_SECOND_UOP_ALL"
			],
			[
				"equa",
				"u_equal_and_dcache"
			],
			[
				"Ex",
				"EX_de_dcache_write_ex"
			],
			[
				"ex",
				"ex_dcache_write"
			],
			[
				"ex_",
				"ex_ld_gpr2"
			],
			[
				"equ",
				"equal_and_gpr1"
			],
			[
				"ex_ld",
				"ex_ld_gpr1"
			],
			[
				"euq",
				"equal_and_memory"
			],
			[
				"ZF",
				"ZF_not"
			],
			[
				"eq",
				"equal_and_gpr1"
			],
			[
				"EX_de",
				"EX_de_dcache_write_wb"
			],
			[
				"EX_C",
				"EX_CONTROL_STORE"
			],
			[
				"WB_DR1",
				"WB_DR1_next"
			],
			[
				"EX_DR",
				"EX_DR1"
			],
			[
				"de",
				"de_datasize_all_out"
			],
			[
				"de_cac",
				"de_dcache_write_wb"
			],
			[
				"de_aluk_ex",
				"de_aluk_ex_out"
			],
			[
				"de_data",
				"de_datasize_all_out"
			],
			[
				"EX_NEIP",
				"EX_NEIP_in"
			],
			[
				"cs_",
				"cs_is_cmps_second_uop_all"
			],
			[
				"O",
				"Out_Dcache_Address"
			],
			[
				"data",
				"data1"
			],
			[
				"Out_",
				"Out_Dcache_Data"
			],
			[
				"Out_v_cs",
				"out_v_cs_ld_gpr2_wb"
			],
			[
				"v_de_",
				"v_de_ld_gpr1_wb"
			],
			[
				"v_de",
				"Out_v_de_ld_gpr1_wb"
			],
			[
				"Out",
				"Out_DR3"
			],
			[
				"cs_is_",
				"cs_is_cmps_first_uop_all"
			],
			[
				"cs_ld",
				"cs_ld_flags_wb"
			],
			[
				"v_de_f",
				"v_de_flags_write_wb"
			],
			[
				"cs",
				"cs_ld_gpr2_wb"
			],
			[
				"v_csld",
				"v_cs_ld_gpr2_wb"
			],
			[
				"de_",
				"de_ld_gpr1_wb"
			],
			[
				"coun",
				"count_minus_one"
			],
			[
				"co",
				"count_minus_one"
			],
			[
				"inte",
				"internal_count"
			],
			[
				"cu",
				"current_flags"
			],
			[
				"pen",
				"pencoder_output"
			],
			[
				"control",
				"control_store"
			],
			[
				"contro",
				"control_store"
			],
			[
				"fil",
				"file_write"
			],
			[
				"mod",
				"module_name"
			],
			[
				"arra",
				"array_of_module_names"
			],
			[
				"inde",
				"index_of_end"
			],
			[
				"write",
				"write_file"
			],
			[
				"input",
				"input_file_name"
			],
			[
				"file_",
				"file_read"
			],
			[
				"ca",
				"calculate_carry_out"
			],
			[
				"post_",
				"post_shift_1"
			],
			[
				"SAR",
				"SAR32_by_1"
			],
			[
				"penc",
				"pencoder_output"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b11 \n`define macro_check_pointer_length 2'b10 \n\n`define default_mem_Value 64'h0000_0055_0000_0FD0\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_ESP_32 ((`default_reg_base_macro + 3'b100) + ((`default_reg_base_macro + 3'b100) << 8) + ((`default_reg_base_macro + 3'b100) << 16) + ((`default_reg_base_macro + 3'b100) << 24)) \n`define default_reg_ESI_32 ((`default_reg_base_macro + 3'b110) + ((`default_reg_base_macro + 3'b110) << 8) + ((`default_reg_base_macro + 3'b110) << 16) + ((`default_reg_base_macro + 3'b110) << 24)) \n`define default_reg_EDI_32 ((`default_reg_base_macro + 3'b111) + ((`default_reg_base_macro + 3'b111) << 8) + ((`default_reg_base_macro + 3'b111) << 16) + ((`default_reg_base_macro + 3'b111) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h81 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'h004\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a_uop1 1'b0\n`define if_check_op_b_uop1 1'b0\n`define if_check_op_a_uop2 1'b0\n`define if_check_op_b_uop2 1'b0\n`define if_check_op_c 1'b1\n`define if_check_aluk 1'b0\n`define check_opA_uop1 (`default_mem_Value) //check values\n`define check_opB_uop1 (`default_reg_ESI_32) \n`define check_opA_uop2 (`default_mem_Value)\n`define check_opB_uop2 (`default_reg_EDI_32)\n`define check_opC (`default_reg_ESP_32 - 12)\n`define check_aluk 3'b110\n`define alu_result (check_opB - check_opA)\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b1\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b1\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b1\n`define check_data1 (`default_reg_ESI_32 + 4)\n`define check_data2 (`default_reg_EDI_32 + 4)\n`define check_data3 (`default_reg_ESP_32 - 12)\n`define check_dr1 3'b110\n`define check_dr2 3'b111\n`define check_dr3 3'b100\n`define produced_flags 32'h0FD0\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b1 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b1\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b1\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0000_0022_0000_0081\n`define taken_eip 32'h0FD0\n`define check_cs 16'h55\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (64'h0000_0022_0000_0081)\n`define check_address ((`default_ss << 16) + (`default_reg_ESP_32 - 12))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_opC;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n   reg [31:0] tb_alu_result;\n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_opC;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_opC;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n            #1;    // Allow for setup time\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n          //no clock wait since Decode 1 has been happening the whole time before the first clock edge\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** UOP1EX/UOP2ME2 ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop1; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a_uop1) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop1 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB_uop1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b_uop1) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop1 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end\n\n          \n/*************************** UOP1WB/UOP2EX ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop2; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a_uop2) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop2 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n      \n            tb_opB = `check_opB_uop2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b_uop2) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop2 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end\n\n            tb_opC = `check_opC; \n            if(2'b00 === `macro_check_length) begin\n              check_opC[7:0] = tb_opC[7:0];\n              correct_opC[7:0] = u_pipeline.EX_C[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:8] = {24{tb_opC[7]}};\n                correct_opC[31:8] = u_pipeline.EX_C[31:8];\n              end else begin \n                check_opC[31:8] = 0;\n                correct_opC[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opC[15:0] = tb_opC[15:0];\n              correct_opC[15:0] = u_pipeline.EX_C[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:16] = {16{tb_opC[15]}};\n                correct_opC[31:16] = u_pipeline.EX_C[31:16];\n              end else begin\n                check_opC[31:16] = 0;\n                correct_opC[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opC = tb_opC; \n              correct_opC = u_pipeline.EX_C;\n            end\n            if(1'b1 === `if_check_op_c) begin\n              if(correct_opC !== check_opC) begin \n                $display(\"Error: EX_C is: %h, but needs to be: %h at time: %d\", correct_opC, check_opC, $time);\n                error <= 1;\n              end\n            end\n\n\n           \n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h at time: %d\", u_pipeline.EX_d2_aluk_ex, `check_aluk, $time);\n                error <= 1;\n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr1 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, 1'b0, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, 1'b0, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, 1'b0, $time);\n              error <= 1;\n            end\n\n            #5\n            tb_alu_result = u_pipeline.u_execute.u_functional_unit_ex.alu32_result;\n            if(1'b1 === `if_check_aluk) begin\n              if(tb_alu_result !== `alu_result) begin \n                $display(\"Error: alu32_result is: %h, but needs to be: %h at time: %d\", tb_alu_result, `alu_result, $time);\n                error <= 1;\n              end\n            end \n\n\n/*************************** UOP2WB ******************************/\n            #(clk_cycle-1-5); //-5 to have time for execute\n            #1;    // Allow for setup time\n\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                error <= 1;\n              end\n            end\n            //$display(\"Force: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                \n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                error <= 1;\n              end\n            end \n            //$display(\"Force: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_data3, `check_data3, $time);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR1, `check_dr1, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR2, `check_dr2, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR3, `check_dr3, $time);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              if(u_pipeline.WB_Final_DR3_datasize !== 2'b10) begin \n                $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, 2'b10, $time);\n                error <= 1;\n              end \n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, `check_datasize, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_MM_Data, `check_mm_data, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `default_eip + instr_length, $time);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `taken_eip, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_CS, `check_cs, $time);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, `check_ld_mm, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, `check_ld_eip, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, `check_ld_cs, $time);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h at time: %d\", correct_dcache_data, check_dcache_data, $time);\n                error <= 1;\n              end\n            end  \n            $display(\"Force: WB_Final_Dcache_Data is: %h, but needs to be: %h at time: %d\", correct_dcache_data, check_dcache_data, $time);\n                     \n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Address, `check_address, $time);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache, $time);\n              error <= 1;\n            end    \n\n            #5\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== (`produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags, $time);\n                error <= 1;\n              end\n            end\n\n\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testMultipleUop/interruptexception/pipeline_tb.v",
			"file_size": 57627,
			"file_write_time": 131701824341861813,
			"settings":
			{
				"buffer_size": 57601,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n`define macro_check_pointer_length 2'b10 \n\n`define default_mem_Value 64'h0000_0055_0000_0FD0\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_ESP_32 ((`default_reg_base_macro + 3'b100) + ((`default_reg_base_macro + 3'b100) << 8) + ((`default_reg_base_macro + 3'b100) << 16) + ((`default_reg_base_macro + 3'b100) << 24)) \n`define default_reg_ESI_32 ((`default_reg_base_macro + 3'b110) + ((`default_reg_base_macro + 3'b110) << 8) + ((`default_reg_base_macro + 3'b110) << 16) + ((`default_reg_base_macro + 3'b110) << 24)) \n`define default_reg_EDI_32 ((`default_reg_base_macro + 3'b111) + ((`default_reg_base_macro + 3'b111) << 8) + ((`default_reg_base_macro + 3'b111) << 16) + ((`default_reg_base_macro + 3'b111) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'h004\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a_uop1 1'b0\n`define if_check_op_b_uop1 1'b0\n`define if_check_op_a_uop2 1'b1\n`define if_check_op_b_uop2 1'b0\n`define if_check_op_c 1'b1\n`define if_check_aluk 1'b0\n`define check_opA_uop1 (`default_mem_Value) //check values\n`define check_opB_uop1 (`default_reg_ESI_32) \n`define check_opA_uop2 (`default_mem_Value)\n`define check_opB_uop2 (`default_reg_EDI_32)\n`define check_opC (`default_reg_ESP_32 + 8)\n`define check_aluk 3'b110\n`define alu_result (check_opB - check_opA)\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b1\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b1\n`define if_check_flags 1'b1\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b1\n`define check_data1 (`default_reg_ESI_32 + 4)\n`define check_data2 (`default_reg_EDI_32 + 4)\n`define check_data3 (`default_reg_ESP_32 + 12)\n`define check_dr1 3'b110\n`define check_dr2 3'b111\n`define check_dr3 3'b100\n`define produced_flags 32'h0FD0\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b1 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b1\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b1\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'h0FD0\n`define check_cs 16'h55\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opC)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_opC;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n   reg [31:0] tb_alu_result;\n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_opC;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_opC;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n            #1;    // Allow for setup time\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n          //no clock wait since Decode 1 has been happening the whole time before the first clock edge\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** UOP1EX/UOP2ME2 ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop1; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a_uop1) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop1 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB_uop1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b_uop1) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop1 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end\n\n          \n/*************************** UOP1WB/UOP2EX ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop2; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a_uop2) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop2 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n      \n            tb_opB = `check_opB_uop2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b_uop2) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop2 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end\n\n            tb_opC = `check_opC; \n            if(2'b00 === `macro_check_length) begin\n              check_opC[7:0] = tb_opC[7:0];\n              correct_opC[7:0] = u_pipeline.EX_C[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:8] = {24{tb_opC[7]}};\n                correct_opC[31:8] = u_pipeline.EX_C[31:8];\n              end else begin \n                check_opC[31:8] = 0;\n                correct_opC[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opC[15:0] = tb_opC[15:0];\n              correct_opC[15:0] = u_pipeline.EX_C[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:16] = {16{tb_opC[15]}};\n                correct_opC[31:16] = u_pipeline.EX_C[31:16];\n              end else begin\n                check_opC[31:16] = 0;\n                correct_opC[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opC = tb_opC; \n              correct_opC = u_pipeline.EX_C;\n            end\n            if(1'b1 === `if_check_op_c) begin\n              if(correct_opC !== check_opC) begin \n                $display(\"Error: EX_C is: %h, but needs to be: %h at time: %d\", correct_opC, check_opC, $time);\n                error <= 1;\n              end\n            end\n\n\n           \n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h at time: %d\", u_pipeline.EX_d2_aluk_ex, `check_aluk, $time);\n                error <= 1;\n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr1 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, 1'b0, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, 1'b0, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, 1'b0, $time);\n              error <= 1;\n            end\n\n            #5\n            tb_alu_result = u_pipeline.u_execute.u_functional_unit_ex.alu32_result;\n            if(1'b1 === `if_check_aluk) begin\n              if(tb_alu_result !== `alu_result) begin \n                $display(\"Error: alu32_result is: %h, but needs to be: %h at time: %d\", tb_alu_result, `alu_result, $time);\n                error <= 1;\n              end\n            end \n\n\n/*************************** UOP2WB ******************************/\n            #(clk_cycle-1-5); //-5 to have time for execute\n            #1;    // Allow for setup time\n\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                error <= 1;\n              end\n            end\n            //$display(\"Force: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                \n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                error <= 1;\n              end\n            end \n            //$display(\"Force: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_data3, `check_data3, $time);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR1, `check_dr1, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR2, `check_dr2, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR3, `check_dr3, $time);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              if(u_pipeline.WB_Final_DR3_datasize !== 2'b10) begin \n                $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, 2'b10, $time);\n                error <= 1;\n              end \n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, `check_datasize, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_MM_Data, `check_mm_data, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `default_eip + instr_length, $time);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `taken_eip, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_CS, `check_cs, $time);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, `check_ld_mm, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, `check_ld_eip, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, `check_ld_cs, $time);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h at time: %d\", correct_dcache_data, check_dcache_data, $time);\n                error <= 1;\n              end\n            end       \n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Address, `check_address, $time);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache, $time);\n              error <= 1;\n            end\n\n            #5\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== (`produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags, $time);\n                error <= 1;\n              end\n            end\n\n\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testMultipleUop/iretdCF/pipeline_tb.v",
			"file_size": 57455,
			"file_write_time": 131701821589144616,
			"settings":
			{
				"buffer_size": 57429,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n`define macro_check_pointer_length 2'b10 \n\n`define default_mem_Value 64'h0000_0000_0000_0092\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_ESI_32 ((`default_reg_base_macro + 3'b110) + ((`default_reg_base_macro + 3'b110) << 8) + ((`default_reg_base_macro + 3'b110) << 16) + ((`default_reg_base_macro + 3'b110) << 24)) \n`define default_reg_EDI_32 ((`default_reg_base_macro + 3'b111) + ((`default_reg_base_macro + 3'b111) << 8) + ((`default_reg_base_macro + 3'b111) << 16) + ((`default_reg_base_macro + 3'b111) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'h000\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_op_c 1'b0\n`define if_check_aluk 1'b1\n`define check_opA_uop1 (`default_mem_Value) //check values\n`define check_opB_uop1 (`default_reg_ESI_32) \n`define check_opA_uop2 (`default_mem_Value)\n`define check_opB_uop2 (`default_reg_EDI_32)\n`define check_internal_b (`default_mem_Value)\n`define check_opC (`default_reg_EX_B_32)\n`define check_aluk 3'b110\n`define alu_result (check_opB - check_opA)\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b1\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 (`default_reg_ESI_32 + 1)\n`define check_data2 (`default_reg_EDI_32 + 1)\n`define check_data3 32'h0\n`define check_dr1 3'b110\n`define check_dr2 3'b111\n`define check_dr3 3'b000\n`define produced_flags 32'h055\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opC)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_opC;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n   reg [31:0] tb_alu_result;\n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_opC;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_opC;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n            #1;    // Allow for setup time\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n          //no clock wait since Decode 1 has been happening the whole time before the first clock edge\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** UOP1EX/UOP2ME2 ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop1; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop1 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB_uop1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop1 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end\n\n          \n/*************************** UOP1WB/UOP2EX ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop2; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop2 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n      \n            tb_opB = `check_opB_uop2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop2 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end  \n\n            tb_opB = `check_internal_b; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.u_execute.b[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.u_execute.b[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.u_execute.b[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.u_execute.b[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.u_execute.b;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: u_execute.b is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end       \n\n            tb_opC = `check_opC; \n            if(2'b00 === `macro_check_length) begin\n              check_opC[7:0] = tb_opC[7:0];\n              correct_opC[7:0] = u_pipeline.EX_C[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:8] = {24{tb_opC[7]}};\n                correct_opC[31:8] = u_pipeline.EX_C[31:8];\n              end else begin \n                check_opC[31:8] = 0;\n                correct_opC[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opC[15:0] = tb_opC[15:0];\n              correct_opC[15:0] = u_pipeline.EX_C[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:16] = {16{tb_opC[15]}};\n                correct_opC[31:16] = u_pipeline.EX_C[31:16];\n              end else begin\n                check_opC[31:16] = 0;\n                correct_opC[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opC = tb_opC; \n              correct_opC = u_pipeline.EX_C;\n            end\n            if(1'b1 === `if_check_op_c) begin\n              if(correct_opC !== check_opC) begin \n                $display(\"Error: EX_C is: %h, but needs to be: %h at time: %d\", correct_opC, check_opC, $time);\n                error <= 1;\n              end\n            end\n\n\n           \n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h at time: %d\", u_pipeline.EX_d2_aluk_ex, `check_aluk, $time);\n                error <= 1;\n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr1 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, 1'b0, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, 1'b0, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, 1'b0, $time);\n              error <= 1;\n            end\n\n            #5\n            tb_alu_result = u_pipeline.u_execute.u_functional_unit_ex.alu32_result;\n            if(tb_alu_result !== `alu_result) begin \n              $display(\"Error: alu32_result is: %h, but needs to be: %h at time: %d\", tb_alu_result, `alu_result, $time);\n              error <= 1;\n            end\n\n\n/*************************** UOP2WB ******************************/\n            #(clk_cycle-1-5); //-5 to have time for execute\n            #1;    // Allow for setup time\n\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                error <= 1;\n              end\n            end\n            $display(\"Force: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                \n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                error <= 1;\n              end\n            end \n            $display(\"Force: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_data3, `check_data3, $time);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR1, `check_dr1, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR2, `check_dr2, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR3, `check_dr3, $time);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              if(u_pipeline.WB_Final_DR3_datasize !== 2'b10) begin \n                $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, 2'b10, $time);\n                error <= 1;\n              end \n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, `check_datasize, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_MM_Data, `check_mm_data, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `default_eip + instr_length, $time);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `taken_eip, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_CS, `check_cs, $time);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, `check_ld_mm, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, `check_ld_eip, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, `check_ld_cs, $time);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h at time: %d\", correct_dcache_data, check_dcache_data, $time);\n                error <= 1;\n              end\n            end       \n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Address, `check_address, $time);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache, $time);\n              error <= 1;\n            end\n\n\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testMultipleUop/repnecmpsF3A6/pipeline_tb.v",
			"file_size": 58543,
			"file_write_time": 131701832390297814,
			"settings":
			{
				"buffer_size": 58517,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pipeline/testSingleBasic/add00/pipeline_tb.v",
			"settings":
			{
				"buffer_size": 49356,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/add01/pipeline_tb.v",
			"file_size": 49355,
			"file_write_time": 131701375223238751,
			"settings":
			{
				"buffer_size": 49329,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/add02/pipeline_tb.v",
			"file_size": 49394,
			"file_write_time": 131701375223240785,
			"settings":
			{
				"buffer_size": 49368,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/add03/pipeline_tb.v",
			"file_size": 49394,
			"file_write_time": 131701375223245719,
			"settings":
			{
				"buffer_size": 49368,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA + `check_opB)\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end   \n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/add04/pipeline_tb.v",
			"file_size": 49422,
			"file_write_time": 131701375223247850,
			"settings":
			{
				"buffer_size": 49396,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA + `check_opB)\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/add05/pipeline_tb.v",
			"file_size": 49420,
			"file_write_time": 131701375223249713,
			"settings":
			{
				"buffer_size": 49394,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/and20/pipeline_tb.v",
			"file_size": 49355,
			"file_write_time": 131701375223252245,
			"settings":
			{
				"buffer_size": 49329,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/and21/pipeline_tb.v",
			"file_size": 49355,
			"file_write_time": 131701375223256471,
			"settings":
			{
				"buffer_size": 49329,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 (`check_opA & `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/and22/pipeline_tb.v",
			"file_size": 49394,
			"file_write_time": 131701375223258292,
			"settings":
			{
				"buffer_size": 49368,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 (`check_opA & `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/and23/pipeline_tb.v",
			"file_size": 49394,
			"file_write_time": 131701375223260937,
			"settings":
			{
				"buffer_size": 49368,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA & `check_opB)\n`define check_data2 (`check_opA & `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/and24/pipeline_tb.v",
			"file_size": 49419,
			"file_write_time": 131701375223265241,
			"settings":
			{
				"buffer_size": 49393,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm32)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA & `check_opB)\n`define check_data2 (`check_opA & `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/and25/pipeline_tb.v",
			"file_size": 49420,
			"file_write_time": 131701375223267850,
			"settings":
			{
				"buffer_size": 49394,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b0\n`define DF_affected 1'b1\n`define SF_affected 1'b0\n`define ZF_affected 1'b0\n`define AF_affected 1'b0\n`define PF_affected 1'b0\n`define CF_affected 1'b0\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm32)\n`define check_aluk 3'b101\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b1\n`define if_check_datasize 1'b0 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA & `check_opB)\n`define check_data2 (`check_opA & `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h000\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/cldFC/pipeline_tb.v",
			"file_size": 49420,
			"file_write_time": 131701375223270570,
			"settings":
			{
				"buffer_size": 49394,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'hAE\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'h111\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b011\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b1\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 8'h14\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h015\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/daa27/pipeline_tb.v",
			"file_size": 49399,
			"file_write_time": 131701375223273575,
			"settings":
			{
				"buffer_size": 49373,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b0\n`define DF_affected 1'b1\n`define SF_affected 1'b0\n`define ZF_affected 1'b0\n`define AF_affected 1'b0\n`define PF_affected 1'b0\n`define CF_affected 1'b0\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm32)\n`define check_aluk 3'b101\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b0 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA & `check_opB)\n`define check_data2 (`check_opA & `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h000\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b0\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n            if(u_pipeline.wb_halt_all !==1'b1) begin \n              $display(\"Error: wb_halt_all is: %h, but needs to be: %h\", u_pipeline.wb_halt_all, 1'b1);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/hltF4/pipeline_tb.v",
			"file_size": 49621,
			"file_write_time": 131701375223278187,
			"settings":
			{
				"buffer_size": 49595,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b000\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EX_B_32) //check values\n`define check_opB (32'h1)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA + `check_opB)\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/inc40/pipeline_tb.v",
			"file_size": 49363,
			"file_write_time": 131701375223282148,
			"settings":
			{
				"buffer_size": 49337,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b000\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (32'h1)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/incFE/pipeline_tb.v",
			"file_size": 49341,
			"file_write_time": 131701375223286838,
			"settings":
			{
				"buffer_size": 49315,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b000\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (32'h1)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/incFF/pipeline_tb.v",
			"file_size": 49341,
			"file_write_time": 131701375223290146,
			"settings":
			{
				"buffer_size": 49315,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_rel_value 32'h7856_3412\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b0 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b1 //0 for eip + instr length, 1 for other\n`define if_rel_eip 1'b1 //0 for absolute, 1 for relative\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(1'b1 === `if_rel_eip) begin\n                if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length + `default_rel_value) begin \n                  $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length + `default_rel_value);\n                  error <= 1; \n                end\n              end else begin\n                if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                  $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                  error <= 1; \n                end \n              end \n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/jmpE9/pipeline_tb.v",
			"file_size": 49864,
			"file_write_time": 131701375223292183,
			"settings":
			{
				"buffer_size": 49838,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_rel_value 8'h78\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b0 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b1 //0 for eip + instr length, 1 for other\n`define if_rel_eip 1'b0 //0 for absolute, 1 for relative\n`define if_check_cs 1'b1\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b1\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'h3412_1324\n`define check_cs 16'h7856\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(1'b1 === `if_rel_eip) begin\n                if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length + `default_rel_value) begin \n                  $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length + `default_rel_value);\n                  error <= 1; \n                end\n              end else begin\n                if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                  $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                  error <= 1; \n                end \n              end \n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/jmpEA/pipeline_tb.v",
			"file_size": 49867,
			"file_write_time": 131701375223297217,
			"settings":
			{
				"buffer_size": 49841,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_rel_value 8'h78\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b0 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b1 //0 for eip + instr length, 1 for other\n`define if_rel_eip 1'b1 //0 for absolute, 1 for relative\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(1'b1 === `if_rel_eip) begin\n                if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length + `default_rel_value) begin \n                  $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length + `default_rel_value);\n                  error <= 1; \n                end\n              end else begin\n                if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                  $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                  error <= 1; \n                end \n              end \n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/jmpEB/pipeline_tb.v",
			"file_size": 49856,
			"file_write_time": 131701375223299682,
			"settings":
			{
				"buffer_size": 49830,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_rel_value 8'h78\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b0 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b1 //0 for eip + instr length, 1 for other\n`define if_rel_eip 1'b0 //0 for absolute, 1 for relative\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'h90AB_CDEF\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(1'b1 === `if_rel_eip) begin\n                if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length + `default_rel_value) begin \n                  $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length + `default_rel_value);\n                  error <= 1; \n                end\n              end else begin\n                if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                  $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                  error <= 1; \n                end \n              end \n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/jmpFF/pipeline_tb.v",
			"file_size": 49863,
			"file_write_time": 131701375223301705,
			"settings":
			{
				"buffer_size": 49837,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end \n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/mov88/pipeline_tb.v",
			"file_size": 49344,
			"file_write_time": 131701375223306417,
			"settings":
			{
				"buffer_size": 49318,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/mov89/pipeline_tb.v",
			"file_size": 49343,
			"file_write_time": 131701375223310571,
			"settings":
			{
				"buffer_size": 49317,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 `check_opA\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/mov8A/pipeline_tb.v",
			"file_size": 49367,
			"file_write_time": 131701375223314195,
			"settings":
			{
				"buffer_size": 49341,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 `check_opA\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/mov8B/pipeline_tb.v",
			"file_size": 49367,
			"file_write_time": 131701375223317839,
			"settings":
			{
				"buffer_size": 49341,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b01 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_reg_EX_B_32) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 `check_opA\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/mov8C/pipeline_tb.v",
			"file_size": 49369,
			"file_write_time": 131701375223321856,
			"settings":
			{
				"buffer_size": 49343,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b01 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b0\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 `check_opA\n`define check_data2 `check_opA\n`define check_data3 32'h0\n`define check_dr1 `default_modrm_reg_opcode\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b1\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/mov8E/pipeline_tb.v",
			"file_size": 49391,
			"file_write_time": 131701375223325227,
			"settings":
			{
				"buffer_size": 49365,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b0\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opB)\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 `default_modrm_reg_opcode\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/movB0/pipeline_tb.v",
			"file_size": 49425,
			"file_write_time": 131701375223328145,
			"settings":
			{
				"buffer_size": 49399,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b0\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opB)\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 `default_modrm_reg_opcode\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA + `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/movB8/pipeline_tb.v",
			"file_size": 49426,
			"file_write_time": 131701375223331197,
			"settings":
			{
				"buffer_size": 49400,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b0\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opB)\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 `default_modrm_reg_opcode\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/movC6/pipeline_tb.v",
			"file_size": 49412,
			"file_write_time": 131701375223334002,
			"settings":
			{
				"buffer_size": 49386,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b000\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b0\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm32)\n`define check_aluk 3'b000\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opB)\n`define check_data2 (`check_opA + `check_opB)\n`define check_data3 32'h0\n`define check_dr1 `default_modrm_reg_opcode\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/movC7/pipeline_tb.v",
			"file_size": 49413,
			"file_write_time": 131701375223337914,
			"settings":
			{
				"buffer_size": 49387,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b010\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h000\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (~`check_opA)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/notF6/pipeline_tb.v",
			"file_size": 49343,
			"file_write_time": 131701375223341780,
			"settings":
			{
				"buffer_size": 49317,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b010\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h000\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (~`check_opA)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/notF7/pipeline_tb.v",
			"file_size": 49343,
			"file_write_time": 131701375223345460,
			"settings":
			{
				"buffer_size": 49317,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b001\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA | `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/or08/pipeline_tb.v",
			"file_size": 49355,
			"file_write_time": 131701375223348386,
			"settings":
			{
				"buffer_size": 49329,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b001\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA | `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/or09/pipeline_tb.v",
			"file_size": 49355,
			"file_write_time": 131701375223351608,
			"settings":
			{
				"buffer_size": 49329,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b001\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 (`check_opA | `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA | `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/or0A/pipeline_tb.v",
			"file_size": 49394,
			"file_write_time": 131701375223355506,
			"settings":
			{
				"buffer_size": 49368,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_EX_B_32)\n`define check_aluk 3'b001\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 (`check_opA | `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA | `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/or0B/pipeline_tb.v",
			"file_size": 49394,
			"file_write_time": 131701375223360605,
			"settings":
			{
				"buffer_size": 49368,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22\n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8)) \n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b001\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA | `check_opB)\n`define check_data2 (`check_opA | `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA | `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/or0C/pipeline_tb.v",
			"file_size": 49419,
			"file_write_time": 131701375223364427,
			"settings":
			{
				"buffer_size": 49393,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm32)\n`define check_aluk 3'b001\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA | `check_opB)\n`define check_data2 (`check_opA | `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA | `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/or0D/pipeline_tb.v",
			"file_size": 49420,
			"file_write_time": 131701375223367758,
			"settings":
			{
				"buffer_size": 49394,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA << `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/salC0/pipeline_tb.v",
			"file_size": 49360,
			"file_write_time": 131701375223369556,
			"settings":
			{
				"buffer_size": 49334,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDDF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'h000\n`define default_imm 32'h8765_4307\n`define default_big_endian_imm8 8'h07\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b1\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h081\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA << `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/salC0dfby7/pipeline_tb.v",
			"file_size": 49360,
			"file_write_time": 131701375223372295,
			"settings":
			{
				"buffer_size": 49334,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (32'h02)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA << `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/salC1/pipeline_tb.v",
			"file_size": 49342,
			"file_write_time": 131701375223377265,
			"settings":
			{
				"buffer_size": 49316,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b01 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (32'h02)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA << `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/salC1operandoverride/pipeline_tb.v",
			"file_size": 49342,
			"file_write_time": 131701375223380247,
			"settings":
			{
				"buffer_size": 49316,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (32'h1)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA << `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/salD0/pipeline_tb.v",
			"file_size": 49341,
			"file_write_time": 131701375223383120,
			"settings":
			{
				"buffer_size": 49315,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB 32'b1\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA << `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/salD1/pipeline_tb.v",
			"file_size": 49339,
			"file_write_time": 131701375223388181,
			"settings":
			{
				"buffer_size": 49313,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_base_macro + 1)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA << `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/salD2/pipeline_tb.v",
			"file_size": 49363,
			"file_write_time": 131701375223393376,
			"settings":
			{
				"buffer_size": 49337,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22\n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8)) \n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b100\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_base_macro + 1)\n`define check_aluk 3'b100\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA << `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/salD3/pipeline_tb.v",
			"file_size": 49363,
			"file_write_time": 131701375223395838,
			"settings":
			{
				"buffer_size": 49337,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b111\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_big_endian_imm8)\n`define check_aluk 3'b111\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA >>> `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/sarC0/pipeline_tb.v",
			"file_size": 49361,
			"file_write_time": 131701375223401938,
			"settings":
			{
				"buffer_size": 49335,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b111\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (32'h02)\n`define check_aluk 3'b111\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA >>> `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/sarC1/pipeline_tb.v",
			"file_size": 49343,
			"file_write_time": 131701375223404361,
			"settings":
			{
				"buffer_size": 49317,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b01 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b111\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (32'h02)\n`define check_aluk 3'b111\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA >>> `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/sarC1operandoverride/pipeline_tb.v",
			"file_size": 49343,
			"file_write_time": 131701375223409142,
			"settings":
			{
				"buffer_size": 49317,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b111\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (32'h1)\n`define check_aluk 3'b111\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA >>> `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/sarD0/pipeline_tb.v",
			"file_size": 49342,
			"file_write_time": 131701375223411396,
			"settings":
			{
				"buffer_size": 49316,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22\n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b111\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB 32'b1\n`define check_aluk 3'b111\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA >>> `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/sarD1/pipeline_tb.v",
			"file_size": 49339,
			"file_write_time": 131701375223415317,
			"settings":
			{
				"buffer_size": 49313,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b111\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_base_macro + 1)\n`define check_aluk 3'b111\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA >>> `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/sarD2/pipeline_tb.v",
			"file_size": 49364,
			"file_write_time": 131701375223420415,
			"settings":
			{
				"buffer_size": 49338,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'hFFF\n`define default_imm 32'h8765_4302\n`define default_big_endian_imm8 8'h02\n`define default_big_endian_imm16 32'h0243\n`define default_big_endian_imm32 32'h0243_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b111\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_aluk 1'b1\n`define check_opA (`default_mem_Value) //check values\n`define check_opB (`default_reg_base_macro + 1)\n`define check_aluk 3'b111\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b0\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 32'h0\n`define check_data2 32'h0\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 3'b000\n`define check_dr3 3'b000\n`define produced_flags 32'h095\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b1\n`define if_check_address 1'b1\n`define check_ld_dcache 1'b1 //check values\n`define check_dcache_data (`check_opA >>> `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/sarD3/pipeline_tb.v",
			"file_size": 49364,
			"file_write_time": 131701375223422405,
			"settings":
			{
				"buffer_size": 49338,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b0\n`define DF_affected 1'b1\n`define SF_affected 1'b0\n`define ZF_affected 1'b0\n`define AF_affected 1'b0\n`define PF_affected 1'b0\n`define CF_affected 1'b0\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n\n`define default_mem_Value 64'h1234_5678_90AB_CDEF\n`define default_reg_base_macro 32'h90\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'h0F1\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b0\n`define if_check_op_b 1'b0\n`define if_check_aluk 1'b1\n`define check_opA (`default_reg_EAX_32) //check values\n`define check_opB (`default_big_endian_imm32)\n`define check_aluk 3'b111\n\n`define if_check_data1 1'b0\n`define if_check_data2 1'b0\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b0\n`define if_check_dr2 1'b0\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b1\n`define if_check_datasize 1'b0 \n`define check_ld_gpr1 1'b0 //check values\n`define check_ld_gpr2 1'b0\n`define check_ld_gpr3 1'b0\n`define check_data1 (`check_opA & `check_opB)\n`define check_data2 (`check_opA & `check_opB)\n`define check_data3 32'h0\n`define check_dr1 3'b000\n`define check_dr2 `default_modrm_reg_opcode\n`define check_dr3 3'b000\n`define produced_flags 32'h400\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opA & `check_opB)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n           #clk_cycle; \n           #1; // allow for \"setup time\"\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** EXECUTE STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: EX_A is: %h, but needs to be: %h\", correct_opA, check_opA);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: EX_B is: %h, but needs to be: %h\", correct_opB, check_opB);\n                error <= 1;\n              end\n            end\n\n\n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h\", u_pipeline.EX_d2_aluk_ex, `check_aluk);\n                error <= 1;\n              end\n            end\n            \n/*************************** WRITEBACK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** WRITEBACK STAGE OUTPUTS COMPARE ******************************/\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h\", correct_data1, check_data1);\n                error <= 1;\n              end\n            end\n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h\", correct_data2, check_data2);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_data3, `check_data3);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR1, `check_dr1);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR2, `check_dr2);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3, `check_dr3);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_DR3_datasize, 2'b10);\n              error <= 1;\n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h\", u_pipeline.WB_Final_datasize, `check_datasize);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h\", u_pipeline.WB_Final_MM_Data, `check_mm_data);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `default_eip + instr_length);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_EIP, `taken_eip);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h\", u_pipeline.WB_Final_CS, `check_cs);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_mm, `check_ld_mm);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_eip, `check_ld_eip);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h\", u_pipeline.WB_Final_ld_cs, `check_ld_cs);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Address, `check_address);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache);\n              error <= 1;\n            end\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testSingleBasic/stdFD/pipeline_tb.v",
			"file_size": 49420,
			"file_write_time": 131701375223426977,
			"settings":
			{
				"buffer_size": 49394,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pipeline/testSingleBasic/add00/run_pipeline",
			"settings":
			{
				"buffer_size": 48,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pipeline/testSingleBasic/xchg86/pipeline_tb.v",
			"settings":
			{
				"buffer_size": 49371,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pipeline/testSingleBasic/xchg96/pipeline_tb.v",
			"settings":
			{
				"buffer_size": 49533,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b00 \n`define macro_check_pointer_length 2'b10 \n\n`define default_mem_Value 64'h0000_0000_0000_0092\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_ESI_32 ((`default_reg_base_macro + 3'b110) + ((`default_reg_base_macro + 3'b110) << 8) + ((`default_reg_base_macro + 3'b110) << 16) + ((`default_reg_base_macro + 3'b110) << 24)) \n`define default_reg_EDI_32 ((`default_reg_base_macro + 3'b111) + ((`default_reg_base_macro + 3'b111) << 8) + ((`default_reg_base_macro + 3'b111) << 16) + ((`default_reg_base_macro + 3'b111) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'h000\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_op_c 1'b0\n`define if_check_aluk 1'b1\n`define check_opA_uop1 (`default_mem_Value) //check values\n`define check_opB_uop1 (`default_reg_ESI_32) \n`define check_opA_uop2 (`default_mem_Value)\n`define check_opB_uop2 (`default_reg_EDI_32)\n`define check_internal_b (`default_mem_Value)\n`define check_opC (`default_reg_EX_B_32)\n`define check_aluk 3'b110\n`define alu_result (check_opB - check_opA)\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b1\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 (`default_reg_ESI_32 + 1)\n`define check_data2 (`default_reg_EDI_32 + 1)\n`define check_data3 32'h0\n`define check_dr1 3'b110\n`define check_dr2 3'b111\n`define check_dr3 3'b000\n`define produced_flags 32'h055\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opC)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_opC;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n   reg [31:0] tb_alu_result;\n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_opC;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_opC;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n            #1;    // Allow for setup time\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n          //no clock wait since Decode 1 has been happening the whole time before the first clock edge\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** UOP1EX/UOP2ME2 ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop1; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop1 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB_uop1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop1 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end\n\n          \n/*************************** UOP1WB/UOP2EX ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop2; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop2 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n      \n            tb_opB = `check_opB_uop2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop2 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end  \n\n            tb_opB = `check_internal_b; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.u_execute.b[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.u_execute.b[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.u_execute.b[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.u_execute.b[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.u_execute.b;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: u_execute.b is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end       \n\n            tb_opC = `check_opC; \n            if(2'b00 === `macro_check_length) begin\n              check_opC[7:0] = tb_opC[7:0];\n              correct_opC[7:0] = u_pipeline.EX_C[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:8] = {24{tb_opC[7]}};\n                correct_opC[31:8] = u_pipeline.EX_C[31:8];\n              end else begin \n                check_opC[31:8] = 0;\n                correct_opC[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opC[15:0] = tb_opC[15:0];\n              correct_opC[15:0] = u_pipeline.EX_C[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:16] = {16{tb_opC[15]}};\n                correct_opC[31:16] = u_pipeline.EX_C[31:16];\n              end else begin\n                check_opC[31:16] = 0;\n                correct_opC[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opC = tb_opC; \n              correct_opC = u_pipeline.EX_C;\n            end\n            if(1'b1 === `if_check_op_c) begin\n              if(correct_opC !== check_opC) begin \n                $display(\"Error: EX_C is: %h, but needs to be: %h at time: %d\", correct_opC, check_opC, $time);\n                error <= 1;\n              end\n            end\n\n\n           \n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h at time: %d\", u_pipeline.EX_d2_aluk_ex, `check_aluk, $time);\n                error <= 1;\n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr1 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, 1'b0, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, 1'b0, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, 1'b0, $time);\n              error <= 1;\n            end\n\n            #5\n            tb_alu_result = u_pipeline.u_execute.u_functional_unit_ex.alu32_result;\n            if(tb_alu_result !== `alu_result) begin \n              $display(\"Error: alu32_result is: %h, but needs to be: %h at time: %d\", tb_alu_result, `alu_result, $time);\n              error <= 1;\n            end\n\n\n/*************************** UOP2WB ******************************/\n            #(clk_cycle-1-5); //-5 to have time for execute\n            #1;    // Allow for setup time\n\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                error <= 1;\n              end\n            end\n            $display(\"Force: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                \n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                error <= 1;\n              end\n            end \n            $display(\"Force: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_data3, `check_data3, $time);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR1, `check_dr1, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR2, `check_dr2, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR3, `check_dr3, $time);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              if(u_pipeline.WB_Final_DR3_datasize !== 2'b10) begin \n                $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, 2'b10, $time);\n                error <= 1;\n              end \n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, `check_datasize, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_MM_Data, `check_mm_data, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `default_eip + instr_length, $time);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `taken_eip, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_CS, `check_cs, $time);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, `check_ld_mm, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, `check_ld_eip, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, `check_ld_cs, $time);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h at time: %d\", correct_dcache_data, check_dcache_data, $time);\n                error <= 1;\n              end\n            end       \n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Address, `check_address, $time);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache, $time);\n              error <= 1;\n            end\n\n\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testMultipleUop/cmpsA6/pipeline_tb.v",
			"file_size": 58543,
			"file_write_time": 131701375223230544,
			"settings":
			{
				"buffer_size": 58517,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns/1ps\n`define EOF = 32'hFFFF_FFFF\n`define NULL 0\n\n`define OF_affected 1'b1\n`define DF_affected 1'b0\n`define SF_affected 1'b1\n`define ZF_affected 1'b1\n`define AF_affected 1'b1\n`define PF_affected 1'b1\n`define CF_affected 1'b1\n`define flags_affected ({`OF_affected, `DF_affected, 2'b0, `SF_affected, `ZF_affected, 1'b0, `AF_affected, 1'b0, `PF_affected, 1'b0, `CF_affected})\n\n`define macro_sign_extend 1'b0\n`define macro_check_length 2'b10 \n`define macro_check_pointer_length 2'b10 \n\n`define default_mem_Value 64'h0000_0000_0000_0092\n`define default_reg_base_macro 32'h02\n`define default_reg_EAX_32 ((`default_reg_base_macro) + ((`default_reg_base_macro) << 8) + ((`default_reg_base_macro ) << 16) + ((`default_reg_base_macro) << 24)) \n`define default_reg_ESI_32 ((`default_reg_base_macro + 3'b110) + ((`default_reg_base_macro + 3'b110) << 8) + ((`default_reg_base_macro + 3'b110) << 16) + ((`default_reg_base_macro + 3'b110) << 24)) \n`define default_reg_EDI_32 ((`default_reg_base_macro + 3'b111) + ((`default_reg_base_macro + 3'b111) << 8) + ((`default_reg_base_macro + 3'b111) << 16) + ((`default_reg_base_macro + 3'b111) << 24)) \n`define default_reg_EX_B_32 ((`default_reg_base_macro + `default_modrm_reg_opcode) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 8) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 16) + ((`default_reg_base_macro + `default_modrm_reg_opcode) << 24)) \n`define default_reg_base_32 ((`default_reg_base_macro + `default_modrm_rm) + ((`default_reg_base_macro + `default_modrm_rm) << 8) + ((`default_reg_base_macro + `default_modrm_rm) << 16) + ((`default_reg_base_macro + `default_modrm_rm) << 24))\n`define default_eip 32'h1 \n`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))\n`define default_flags 32'h000\n`define default_imm 32'h8765_4321\n`define default_big_endian_imm8 8'h21\n`define default_big_endian_imm16 32'h2143\n`define default_big_endian_imm32 32'h2143_6587\n`define default_dis 32'h0B00_0000\n`define default_big_endian_dis 32'h0000_000B\n`define default_offset 32'h1234_5678\n`define default_offset2 16'h2413\n`define default_modrm_mod 2'b10\n`define default_modrm_reg_opcode 3'b010\n`define default_modrm_rm 3'b101\n\n`define if_check_op_a 1'b1\n`define if_check_op_b 1'b1\n`define if_check_op_c 1'b0\n`define if_check_aluk 1'b1\n`define check_opA_uop1 (`default_mem_Value) //check values\n`define check_opB_uop1 (`default_reg_ESI_32) \n`define check_opA_uop2 (`default_mem_Value)\n`define check_opB_uop2 (`default_reg_EDI_32)\n`define check_internal_b (`default_mem_Value)\n`define check_opC (`default_reg_EX_B_32)\n`define check_aluk 3'b110\n`define alu_result (check_opB - check_opA)\n\n`define if_check_data1 1'b1\n`define if_check_data2 1'b1\n`define if_check_data3 1'b0\n`define if_check_dr1 1'b1\n`define if_check_dr2 1'b1\n`define if_check_dr3 1'b0\n`define if_check_flags 1'b1\n`define if_check_datasize 1'b1 \n`define check_ld_gpr1 1'b1 //check values\n`define check_ld_gpr2 1'b1\n`define check_ld_gpr3 1'b0\n`define check_data1 (`default_reg_ESI_32 + 4)\n`define check_data2 (`default_reg_EDI_32 + 4)\n`define check_data3 32'h0\n`define check_dr1 3'b110\n`define check_dr2 3'b111\n`define check_dr3 3'b000\n`define produced_flags 32'h055\n`define check_datasize `macro_check_length\n\n`define if_check_mm_data 1'b0\n`define which_check_eip 1'b0 //0 for eip + instr length, 1 for other\n`define if_check_cs 1'b0\n`define check_ld_mm 1'b0 //check values\n`define check_ld_eip 1'b1\n`define check_ld_cs 1'b0\n`define check_ld_seg 1'b0\n`define check_mm_data 64'h0\n`define taken_eip 32'b0\n`define check_cs 16'h0\n\n`define if_check_dcachedata 1'b0\n`define if_check_address 1'b0\n`define check_ld_dcache 1'b0 //check values\n`define check_dcache_data (`check_opC)\n`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))\n\nmodule TOP;\n//this module is used to debug the basic functionality of the simulator\n//the clk cycle used to drive the entire system\n   reg error = 0;\n\n   reg clk, clr, pre;\n   reg [127:0] IR;\n   integer clk_cycle = 10;\n   integer half_cycle = 5;\n\n   // Signals for testbench loop\n   integer file, char, retval, lineno, cntErrors;\n   reg [15:0] opcode;\n   reg [31:0] result;\n   reg [7:0] prefix1, prefix2, prefix3, modrm, sib;\n   reg [31:0] disp, imm;\n   reg [47:0] offset, offset_compare;\n   reg prefix1_present, prefix2_present, prefix3_present, sib_present, modrm_present;\n   reg [1:0] opcode_size, prefix_size;\n   reg disp_present, imm_present, prefix_present, offset_present;\n   reg [2:0] disp_size, imm_size, offset_size;\n   reg [3:0] instr_length;\n   reg opcode_size_en, disp_size_en;\n   reg [1:0] imm_size_en, offset_size_en;\n   reg imm_size8, imm_size16, imm_size32;         \n   reg offset_size8, offset_size16, offset_size32, offset_size48;\n   reg operand_override;\n   integer j=14;\n\n   reg [31:0] EIP_UPDATE;\n\n   reg [31:0] tb_opA;\n   reg [31:0] tb_opB;\n   reg [31:0] tb_opC;\n   reg [31:0] tb_data1;\n   reg [31:0] tb_data2;\n   reg [31:0] tb_dcache;\n   reg [63:0] tb_dcache_data; \n   reg [31:0] tb_alu_result;\n\n   reg [31:0] check_opA;\n   reg [31:0] check_opB;\n   reg [31:0] check_opC;\n   reg [31:0] check_data1;\n   reg [31:0] check_data2;\n   reg [63:0] check_dcache_data;\n   reg [31:0] correct_opA;\n   reg [31:0] correct_opB;\n   reg [31:0] correct_opC;\n   reg [31:0] correct_data1;\n   reg [31:0] correct_data2;\n   reg [63:0] correct_dcache_data;\n\n   PIPELINE u_pipeline(clk, clr, pre, IR);\n\n   initial begin\n        clk = 0;\n        clr = 0;\n        pre = 1;\n        repeat(2) #clk_cycle //wait 2 clock cycles\n        clr = 1;\n        forever #(half_cycle)  clk = ~clk;\n    end\n\n    // Set the register values\n    // reg0 = 32'08000823\n    // reg1 = 32'09010901\n    // reg2 = 32'0A020A02\n    // reg3 = 32'0B030B03\n    // reg4 = 32'0C040C04\n    // reg5 = 32'0D050D05\n    // reg6 = 32'0E060E06\n    // reg7 = 32'0F070F07\n    initial begin\n        u_pipeline.u_register_file.gpr.reg0_ll.Q = (`default_reg_base_macro);\n        u_pipeline.u_register_file.gpr.reg1_ll.Q = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.gpr.reg2_ll.Q = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.gpr.reg3_ll.Q = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.gpr.reg4_ll.Q = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.gpr.reg5_ll.Q = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.gpr.reg6_ll.Q = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.gpr.reg7_ll.Q = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.gpr.reg0_lh.Q = (`default_reg_base_macro) << 8;\n        u_pipeline.u_register_file.gpr.reg1_lh.Q = (`default_reg_base_macro + 1) << 8;\n        u_pipeline.u_register_file.gpr.reg2_lh.Q = (`default_reg_base_macro + 2) << 8;\n        u_pipeline.u_register_file.gpr.reg3_lh.Q = (`default_reg_base_macro + 3) << 8;\n        u_pipeline.u_register_file.gpr.reg4_lh.Q = (`default_reg_base_macro + 4) << 8;\n        u_pipeline.u_register_file.gpr.reg5_lh.Q = (`default_reg_base_macro + 5) << 8;\n        u_pipeline.u_register_file.gpr.reg6_lh.Q = (`default_reg_base_macro + 6) << 8;\n        u_pipeline.u_register_file.gpr.reg7_lh.Q = (`default_reg_base_macro + 7) << 8;\n\n        u_pipeline.u_register_file.gpr.reg0_hl.Q = (`default_reg_base_macro) << 16;\n        u_pipeline.u_register_file.gpr.reg1_hl.Q = (`default_reg_base_macro + 1) << 16;\n        u_pipeline.u_register_file.gpr.reg2_hl.Q = (`default_reg_base_macro + 2) << 16;\n        u_pipeline.u_register_file.gpr.reg3_hl.Q = (`default_reg_base_macro + 3) << 16;\n        u_pipeline.u_register_file.gpr.reg4_hl.Q = (`default_reg_base_macro + 4) << 16;\n        u_pipeline.u_register_file.gpr.reg5_hl.Q = (`default_reg_base_macro + 5) << 16;\n        u_pipeline.u_register_file.gpr.reg6_hl.Q = (`default_reg_base_macro + 6) << 16;\n        u_pipeline.u_register_file.gpr.reg7_hl.Q = (`default_reg_base_macro + 7) << 16;\n\n        u_pipeline.u_register_file.gpr.reg0_hh.Q = (`default_reg_base_macro) << 24;\n        u_pipeline.u_register_file.gpr.reg1_hh.Q = (`default_reg_base_macro + 1) << 24;\n        u_pipeline.u_register_file.gpr.reg2_hh.Q = (`default_reg_base_macro + 2) << 24;\n        u_pipeline.u_register_file.gpr.reg3_hh.Q = (`default_reg_base_macro + 3) << 24;\n        u_pipeline.u_register_file.gpr.reg4_hh.Q = (`default_reg_base_macro + 4) << 24;\n        u_pipeline.u_register_file.gpr.reg5_hh.Q = (`default_reg_base_macro + 5) << 24;\n        u_pipeline.u_register_file.gpr.reg6_hh.Q = (`default_reg_base_macro + 6) << 24;\n        u_pipeline.u_register_file.gpr.reg7_hh.Q = (`default_reg_base_macro + 7) << 24;\n\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[0] = (`default_reg_base_macro + 0);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[1] = (`default_reg_base_macro + 1);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[2] = (`default_reg_base_macro + 2);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[3] = (`default_reg_base_macro + 3);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[4] = (`default_reg_base_macro + 4);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[5] = (`default_reg_base_macro + 5);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[6] = (`default_reg_base_macro + 6);\n        u_pipeline.u_register_file.segr.regfilehi.mem_array[7] = (`default_reg_base_macro + 7);\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilehi.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilehi.regfilelo.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilehi.mem_array[7] = 8'h7;\n\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[0] = 8'h0;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[1] = 8'h1;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[2] = 8'h2;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[3] = 8'h3;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[4] = 8'h4;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[5] = 8'h5;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[6] = 8'h6;\n        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = 8'h7;\n\n\n        u_pipeline.debug_eip_in = `default_eip;\n        u_pipeline.debug_cs_in = `default_cs;\n        u_pipeline.u_register_file.eflags.Q = `default_flags;\n        u_pipeline.u_writeback.u_flags_wb.u_flags_register.Q = `default_flags; //internal flags register\n        if(1'b1 === `if_check_data1) begin\n        u_pipeline.debug_memory = `default_mem_Value;\n        \n     end \n\n     initial begin\n         // file format\n         // prefix1 prefix2 prefix3 opcode modrm sib disp imm offset\n         file = $fopen(\"instruction_trace\", \"r\");\n         if (file == `NULL) begin\n             $stop;\n         end\n\n         @(posedge clr);\n         #(half_cycle)\n        char = $fgetc(file);\n        \n           // Initializing the sizes every time to zero\n           j = 15; \n           IR = 128'h0;\n           prefix_size = 0;\n           opcode_size = 1;\n           imm_size = 0;\n           disp_size = 0;\n           offset_size = 0;\n           opcode_size_en = 0;\n           imm_size_en = 0;\n           disp_size_en = 0;\n           offset_size_en = 0;\n            prefix_present = 0;\n            operand_override =0;\n\n           retval = $ungetc(char, file); // push back the non-EOF char\n\n           // retval = $fscanf(file, \"%h %h %h %h %h %h %h %h\", prefix1, prefix2, prefix3,\n           //     opcode, modrm, sib, disp, imm);\n           retval = $fscanf(file, \"%h %h\", prefix1, opcode);\n           char = $fgetc(file); // eats newline\n\n          // $display (\"Time: %0d, OPCODE: %h\", $time, opcode);\n           \n           if(prefix1 == 16'h66) begin\n               prefix_present = 1;\n               prefix_size = 1;\n               operand_override = 1;\n               IR[8*j +: 8] = prefix1;\n               j = j-1;\n           end\n\n           if(opcode[15:8] == 8'h0F) begin\n               j= j-1;\n               IR[8*j +: 16] = opcode;\n               opcode_size =2;\n               opcode_size_en=1;\n           end else begin\n               IR[8*j +: 8] = opcode[7:0];\n               opcode_size =1;\n               opcode_size_en=0;\n           end\n//           //$display (\"Time: %0d IR = %h\", $time, IR[127:112]);\n\n           modrm_present = (opcode==16'h0081) || (opcode==16'h0083) || (opcode==16'h0001) || (opcode==16'h0000) || (opcode==16'h0002) || \n            (opcode==16'h0003) || (opcode==16'h0008) || (opcode==16'h0009) || (opcode==16'h000A) || (opcode==16'h000B) || \n            (opcode==16'h0F42) || (opcode==16'h0F6F) || (opcode==16'h0F70) || (opcode==16'h0F7F) || (opcode==16'h0FB0) ||\n            (opcode==16'h0FB1) || (opcode==16'h0FED) || (opcode==16'h0FFD) || (opcode==16'h0FFE) || (opcode==16'h0020) ||\n            (opcode==16'h0021) || (opcode==16'h0022) || (opcode==16'h0023) || (opcode==16'h0080) || (opcode==16'h0086) ||\n            (opcode==16'h0087) || (opcode==16'h0088) || (opcode==16'h0089) || (opcode==16'h008A) || (opcode==16'h008B) ||\n            (opcode==16'h008C) || (opcode==16'h008E) || (opcode==16'h008F) || (opcode==16'h00C0) || (opcode==16'h00C1) ||\n            (opcode==16'h00C6) || (opcode==16'h00C7) || (opcode==16'h00D0) || (opcode==16'h00D1) || (opcode==16'h00D1) ||\n            (opcode==16'h00D2) || (opcode==16'h00D3) || (opcode==16'h00F6) || (opcode==16'h00F7) || (opcode==16'h00FE) ||\n            (opcode==16'h00FF);\n\n            if(modrm_present == 1'b1) begin \n                //modrm = {$random};\n                modrm = {`default_modrm_mod, `default_modrm_reg_opcode, `default_modrm_rm}; //95\n                j=j-1;\n                IR[8*j +: 8] = modrm;\n//                $display (\"Time: %0d MODRM = %h\", $time, modrm);\n            end\n\n            sib_present = modrm_present && (((modrm[7:6]==2'b00) || (modrm[7:6]==2'b01) || (modrm[7:6]==2'b10)) && (modrm[2:0]==3'b100)); \n\n            if(sib_present == 1'b1) begin\n                sib = {$random};\n                j=j-1;\n                IR[8*j +: 8] = sib;\n//                $display (\"Time: %0d SIB = %h\", $time, sib);\n            end\n\n            disp_present = modrm_present && ((modrm[7:6]==2'b01) || (modrm[7:6]==2'b10) || ((modrm[7:6]==2'b00) && (modrm[2:0]==3'b101)));\n\n            if(modrm_present && (modrm[7:6]==2'b01)) \n                disp_size=1;\n\n            if(disp_present == 1'b1) begin\n                if(disp_size==1) begin\n                    j=j-1;\n                    //disp[7:0] = {$random};\n                    disp = `default_dis;\n                    IR[8*j +: 8] = disp[7:0];\n                    disp_size_en=1;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp[7:0]);\n                end else begin\n                    j=j-4;\n                    //disp = {$random};\n                    disp_size = 4;\n                    disp = `default_dis;\n                    IR[8*j +: 32] = disp; \n                    disp_size_en=0;\n//                    $display (\"Time: %0 DISP = %h\", $time, disp);\n                end\n            end\n            \n\n            imm_size8 = (opcode==16'h04) || (opcode==16'h0C) || (opcode==16'h0F70) || (opcode==16'h24) || (opcode==16'h6A) || \n            (opcode==16'h80) || (opcode==16'h83) || (opcode==16'hB0) || (opcode==16'hB1) || (opcode==16'hB2) ||\n            (opcode==16'hB3) || (opcode==16'hB4) || (opcode==16'hB5) || (opcode==16'hB6) || (opcode==16'hB7) ||\n            (opcode==16'hC0) || (opcode==16'hC1) || (opcode==16'hC6);\n\n            imm_size16 = (opcode==16'hC2) || (opcode==16'hCA) || \n            (operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7)));\n\n            imm_size32 = !operand_override && ((opcode==16'h68) || (opcode==16'h05) || (opcode==16'h0D) || (opcode==16'h25) || \n            (opcode==16'h81) || (opcode==16'hB8) || (opcode==16'hB9) || (opcode==16'hBA) || (opcode==16'hBB) ||\n            (opcode==16'hBC) || (opcode==16'hBD) || (opcode==16'hBE) || (opcode==16'hBF) || (opcode==16'hC7));\n                \n            imm_present = imm_size8 | imm_size16 | imm_size32;\n\n            if(imm_size8) begin\n                imm[7:0] = {$random};\n                imm[7:0] = `default_imm;\n                j=j-1;\n                imm_size = 1;\n                imm_size_en = 0;\n                IR[8*j +: 8] = imm[7:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[7:0]);\n            end else if(imm_size16) begin\n                imm[15:0] = {$random};\n                imm[15:0] = `default_imm;\n                j=j-2;\n                imm_size = 2;\n                imm_size_en = 1;\n                IR[8*j +: 16] = imm[15:0];\n//                $display (\"Time: %0d IMM = %h\", $time, imm[15:0]);\n            end else if(imm_size32) begin\n                imm = {$random};\n                imm = `default_imm;\n                j=j-4;\n                imm_size = 4;\n                imm_size_en = 2;\n                IR[8*j +: 32] = imm;\n//                $display (\"Time: %0d IMM = %h\", $time, imm);\n            end\n\n\n            offset_size8 = (opcode==16'hEB) || (opcode==16'h77) || (opcode==16'h75);\n            offset_size16 = operand_override && ((opcode==16'hE8) || (opcode==16'hE9) || (opcode==16'h0F87) || (opcode==16'h0F85));\n            offset_size32 = (operand_override && (opcode==16'hEA)) || \n                (!operand_override && ((opcode==16'hE9) || (opcode==16'hE8) || (opcode==16'h0F87) || (opcode==16'h0F85)));\n            offset_size48 = (!operand_override && (opcode==16'hEA)) || (opcode==16'h9A);\n\n            offset_present = offset_size8 | offset_size16 | offset_size32 | offset_size48;\n\n            if(offset_size8) begin\n                offset[7:0] = `default_offset;\n                j=j-1;\n                offset_size = 1;\n                offset_size_en = 0;\n                IR[8*j +: 8] = offset[7:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[7:0]);\n            end else if(offset_size16) begin\n                offset[15:0] = `default_offset;\n                j=j-2;\n                offset_size = 2;\n                offset_size_en = 1;\n                IR[8*j +: 16] = offset[15:0];\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[15:0]);\n            end else if(offset_size32) begin\n                offset = `default_offset;\n                j=j-4;\n                offset_size = 4;\n                offset_size_en = 2;\n                IR[8*j +: 32] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[31:0]);\n            end else if(offset_size48) begin\n                offset[31:0] = `default_offset;\n                offset[47:32] = `default_offset2;\n                j=j-6;\n                offset_size = 6;\n                offset_size_en = 3;\n                IR[8*j +: 48] = offset;\n//                $display (\"Time: %0d OFFSET = %h\", $time, offset[47:0]);\n            end\n\n            instr_length = prefix_size + opcode_size + modrm_present + sib_present + disp_size + imm_size + offset_size;\n//            $display(\"%h, %h, %h, %h, %h, %h, %h\", prefix_size, opcode_size,modrm_present,sib_present,disp_size,imm_size,offset_size);\n            //$display(\"instr_length = %h\", instr_length);\n            @(posedge clk);\n            #1;    // Allow for setup time\n\n/*************************** DECODE2 STAGE INPUTS COMPARE ******************************/\n          //no clock wait since Decode 1 has been happening the whole time before the first clock edge\n           if(u_pipeline.IR_OUT !== IR) begin\n               $display(\"time: %0d IR_OUT error: %h!!\", $time, u_pipeline.IR_OUT);\n//               $stop;\n           end else \n               // $display(\"time: %0d IR_OUT: %h\", $time, u_pipeline.IR_OUT);\n\n           if(u_pipeline.DE_EIP_OUT !== u_pipeline.DE_EIP_IN) begin\n               $display(\"time: %0d DE_EIP_OUT error!!: %h\", $time, u_pipeline.DE_EIP_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_CS_OUT !== u_pipeline.DE_CS_IN) begin\n               $display(\"time: %0d DE_CS_OUT error!!: %h\", $time, u_pipeline.DE_CS_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT !== instr_length) begin\n               $display(\"time: %0d DE_INSTR_LENGTH_UPDATE_OUT error!!: %h %h\", $time, u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT, instr_length);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OPCODE_OUT !== opcode) begin\n               $display(\"time: %0d DE_OPCODE_OUT error!!: %h\", $time, u_pipeline.DE_OPCODE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_SIZE_OUT !== prefix_size) begin\n               $display(\"time: %0d DE_PRE_SIZE_OUT error!! %h\", $time, u_pipeline.DE_PRE_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_PRE_PRES_OUT !== prefix_present) begin\n               $display(\"time: %0d DE_PRE_PRES_OUT error!! %h\", $time, u_pipeline.DE_PRE_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_SEG_OVR_OUT !== 0) begin\n               $display(\"time: %0d DE_SEG_OVR_OUT error!! %h\", $time, u_pipeline.DE_SEG_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_OVR_OUT !== operand_override) begin\n               $display(\"time: %0d DE_OP_OVR_OUT error!! %h\", $time, u_pipeline.DE_OP_OVR_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_RE_PRE_OUT !== 0) begin\n               $display(\"time: %0d DE_RE_PRE_OUT error!! %h\", $time, u_pipeline.DE_RE_PRE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_MODRM_PRES_OUT !== modrm_present) begin\n               $display(\"time: %0d DE_MODRM_PRES_OUT error!! %h\", $time, u_pipeline.DE_MODRM_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_IMM_PRES_OUT !== imm_present) begin\n               $display(\"time: %0d DE_IMM_PRES_OUT error!! %h\", $time, u_pipeline.DE_IMM_PRES_OUT);\n//               $stop;\n           end\n\n           if(imm_present) begin\n           if(u_pipeline.DE_IMM_SIZE_OUT !== imm_size_en) begin\n               $display(\"time: %0d DE_IMM_SIZE_OUT error!! %h\", $time, u_pipeline.DE_IMM_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_SIB_PRES_OUT !== sib_present) begin\n               $display(\"time: %0d DE_SIB_PRES_OUT error!! %h\", $time, u_pipeline.DE_SIB_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_DISP_PRES_OUT !== disp_present) begin\n               $display(\"time: %0d DE_DISP_PRES_OUT error!! %h\", $time, u_pipeline.DE_DISP_PRES_OUT);\n//               $stop;\n           end\n\n           if(disp_present) begin\n           if(u_pipeline.DE_DISP_SIZE_OUT !== disp_size_en) begin\n               $display(\"time: %0d DE_DISP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_DISP_SIZE_OUT);\n//               $stop;\n           end\n           end\n\n           if(u_pipeline.DE_OFFSET_PRES_OUT !== offset_present) begin\n               $display(\"time: %0d DE_OFFSET_PRES_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_PRES_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OP_SIZE_OUT !== opcode_size_en) begin\n               $display(\"time: %0d DE_OP_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OP_SIZE_OUT);\n//               $stop;\n           end\n\n           if(u_pipeline.DE_OFFSET_SIZE_OUT !== offset_size_en) begin\n               $display(\"time: %0d DE_OFFSET_SIZE_OUT error!! %h\", $time, u_pipeline.DE_OFFSET_SIZE_OUT);\n//               $stop;\n           end\n\n//           if(u_pipeline.DE_SEGID_OUT !== segID) begin\n//               $display(\"time: %0d DE_SEGID_OUT error!! %h\", $time, u_pipeline.DE_SEGID_OUT);\n////               $stop;\n//           end\n\n          if(modrm_present) begin\n           if(u_pipeline.DE_MODRM_OUT !== modrm) begin\n               $display(\"time: %0d DE_MODRM_OUT error!! %h\", $time, u_pipeline.DE_MODRM_OUT);\n//               $stop;\n           end\n          end\n\n          if(sib_present) begin\n           if(u_pipeline.DE_SIB_OUT !== sib) begin\n               $display(\"time: %0d DE_SIB_OUT error!! %h\", $time, u_pipeline.DE_SIB_OUT);\n//               $stop;\n           end\n          end\n\n/*************************** ADDRESS GENERATION STAGE INPUTS COMPARE ******************************/\n\n            EIP_UPDATE = u_pipeline.DE_INSTR_LENGTH_UPDATE_OUT + u_pipeline.DE_EIP_OUT;\n\n            if(offset_present) begin\n                if(offset_size == 1) begin\n                    offset_compare[7:0] = offset[7:0];\n                    offset_compare[47:8] = 0;\n                end else if(offset_size == 2) begin\n                    offset_compare[7:0] = offset[15:8];\n                    offset_compare[15:8] = offset[7:0];\n                    offset_compare[47:16] = 0;\n                end else if(offset_size == 4) begin\n                    if(opcode == 16'hEA && operand_override) begin\n                        offset_compare[47:40] = offset[7:0];\n                        offset_compare[39:32] = offset[15:8];\n                        offset_compare[31:16] = 16'h0;\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                    end else begin\n                        offset_compare[31:24] = offset[7:0];\n                        offset_compare[23:16] = offset[15:8];\n                        offset_compare[15:8] = offset[23:16];\n                        offset_compare[7:0] = offset[31:24];\n                        offset_compare[47:32] = 0;\n                    end\n                end else if(offset_size == 6) begin\n                    offset_compare[47:40] = offset[7:0];\n                    offset_compare[39:32] = offset[15:8];\n                    offset_compare[31:24] = offset[23:16];\n                    offset_compare[23:16] = offset[31:24];\n                    offset_compare[15:8] = offset[39:32];\n                    offset_compare[7:0] = offset[47:40];\n                end\n            end\n\n\n/*************************** ADDRESS GENERATION 1 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n           \n            // Valid Signal always 1 for now\n            // Check for the valid signal\n\n            if(u_pipeline.AG_PS_EIP !== EIP_UPDATE) begin\n                $display(\"time: %0d AG_PS_EIP error!! %h\", $time, u_pipeline.AG_PS_EIP);\n//              $stop;\n            end\n\n            if(u_pipeline.AG_PS_CS !== u_pipeline.D2_CS_OUT) begin\n                $display(\"time: %0d AG_PS_CS error!! %h\", $time, u_pipeline.AG_PS_CS);\n//              $stop;\n            end\n\n//            if(u_pipeline.AG_PS_OFFSET !== offset_compare) begin\n//                $display(\"time: %0d AG_PS_OFFSET error!! %h\", $time, u_pipeline.AG_PS_OFFSET);\n////              $stop;\n//            end\n\n/*************************** ADDRESS GENERATION 2 STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n/*************************** MEM_DEP_CHECK STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time            \n\n/*************************** MEMORY STAGE INPUTS COMPARE ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            // Opcode == 04\n            //if(opcode == 16'h4 || opcode==16'h5 || opcode==16'h81 || opcode==16'h83 || opcode==16'h01) begin\n            //    result = ME_A_OUT + ME_B_OUT;\n            //end\n            /*\n        $display (\"at time %0d, MEM_A = %h\", $time, u_pipeline.u_memory_stage.A);\n        $display (\"at time %0d, MEM_b = %h\", $time, u_pipeline.u_memory_stage.B);\n        */\n\n/*************************** UOP1EX/UOP2ME2 ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop1; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop1 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n\n            tb_opB = `check_opB_uop1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop1 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end\n\n          \n/*************************** UOP1WB/UOP2EX ******************************/\n            #(clk_cycle-1);\n            #1;    // Allow for setup time\n\n            tb_opA = `check_opA_uop2; \n            if(2'b00 === `macro_check_length) begin\n              check_opA[7:0] = tb_opA[7:0];\n              correct_opA[7:0] = u_pipeline.EX_A[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:8] = {24{tb_opA[7]}};\n                correct_opA[31:8] = u_pipeline.EX_A[31:8];\n              end else begin\n                check_opA[31:8] = 0;\n                correct_opA[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opA[15:0] = tb_opA[15:0];\n              correct_opA[15:0] = u_pipeline.EX_A[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opA[31:16] = {16{tb_opA[15]}};\n                correct_opA[31:16] = u_pipeline.EX_A[31:16];\n              end else begin \n                check_opA[31:16] = 0;\n                correct_opA[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opA = tb_opA; \n              correct_opA = u_pipeline.EX_A;\n            end\n            if(1'b1 === `if_check_op_a) begin\n              if(correct_opA !== check_opA) begin \n                $display(\"Error: uop2 EX_A is: %h, but needs to be: %h at time: %d\", correct_opA, check_opA, $time);\n                error <= 1;\n              end\n            end\n      \n            tb_opB = `check_opB_uop2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.EX_B[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.EX_B[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.EX_B[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.EX_B[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.EX_B;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: uop2 EX_B is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end  \n\n            tb_opB = `check_internal_b; \n            if(2'b00 === `macro_check_length) begin\n              check_opB[7:0] = tb_opB[7:0];\n              correct_opB[7:0] = u_pipeline.u_execute.b[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:8] = {24{tb_opB[7]}};\n                correct_opB[31:8] = u_pipeline.u_execute.b[31:8];\n              end else begin \n                check_opB[31:8] = 0;\n                correct_opB[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opB[15:0] = tb_opB[15:0];\n              correct_opB[15:0] = u_pipeline.u_execute.b[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opB[31:16] = {16{tb_opB[15]}};\n                correct_opB[31:16] = u_pipeline.u_execute.b[31:16];\n              end else begin\n                check_opB[31:16] = 0;\n                correct_opB[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opB = tb_opB; \n              correct_opB = u_pipeline.u_execute.b;\n            end\n            if(1'b1 === `if_check_op_b) begin\n              if(correct_opB !== check_opB) begin \n                $display(\"Error: u_execute.b is: %h, but needs to be: %h at time: %d\", correct_opB, check_opB, $time);\n                error <= 1;\n              end\n            end       \n\n            tb_opC = `check_opC; \n            if(2'b00 === `macro_check_length) begin\n              check_opC[7:0] = tb_opC[7:0];\n              correct_opC[7:0] = u_pipeline.EX_C[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:8] = {24{tb_opC[7]}};\n                correct_opC[31:8] = u_pipeline.EX_C[31:8];\n              end else begin \n                check_opC[31:8] = 0;\n                correct_opC[31:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_opC[15:0] = tb_opC[15:0];\n              correct_opC[15:0] = u_pipeline.EX_C[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_opC[31:16] = {16{tb_opC[15]}};\n                correct_opC[31:16] = u_pipeline.EX_C[31:16];\n              end else begin\n                check_opC[31:16] = 0;\n                correct_opC[31:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_opC = tb_opC; \n              correct_opC = u_pipeline.EX_C;\n            end\n            if(1'b1 === `if_check_op_c) begin\n              if(correct_opC !== check_opC) begin \n                $display(\"Error: EX_C is: %h, but needs to be: %h at time: %d\", correct_opC, check_opC, $time);\n                error <= 1;\n              end\n            end\n\n\n           \n            if(1'b1 === `if_check_aluk) begin\n              if(u_pipeline.EX_d2_aluk_ex !== `check_aluk) begin \n                $display(\"Error: EX_d2_aluk_ex is: %h, but needs to be: %h at time: %d\", u_pipeline.EX_d2_aluk_ex, `check_aluk, $time);\n                error <= 1;\n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr1 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, 1'b0, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, 1'b0, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== 1'b0) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, 1'b0, $time);\n              error <= 1;\n            end\n\n            #5\n            tb_alu_result = u_pipeline.u_execute.u_functional_unit_ex.alu32_result;\n            if(tb_alu_result !== `alu_result) begin \n              $display(\"Error: alu32_result is: %h, but needs to be: %h at time: %d\", tb_alu_result, `alu_result, $time);\n              error <= 1;\n            end\n\n\n/*************************** UOP2WB ******************************/\n            #(clk_cycle-1-5); //-5 to have time for execute\n            #1;    // Allow for setup time\n\n            tb_data1 = `check_data1; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data1[7:0] = tb_data1[7:0];\n              correct_data1[7:0] = u_pipeline.WB_Final_data1[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:8] = {24{tb_data1[7]}};\n                correct_data1[31:8] = u_pipeline.WB_Final_data1[31:8];\n              end else begin\n                check_data1[31:8] = 0;\n                correct_data1[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data1[15:0] = tb_data1[15:0];\n              correct_data1[15:0] = u_pipeline.WB_Final_data1[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data1[31:16] = {16{tb_data1[15]}};\n                correct_data1[31:16] = u_pipeline.WB_Final_data1[31:16];\n              end else begin \n                check_data1[31:16] = 0;\n                correct_data1[31:16] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data1 = tb_data1; \n              correct_data1 = u_pipeline.WB_Final_data1;\n            end\n            if(1'b1 === `if_check_data1) begin\n              if(correct_data1 !== check_data1) begin \n                $display(\"Error: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                error <= 1;\n              end\n            end\n            $display(\"Force: WB_Final_data1 is: %h, but needs to be: %h at time: %d\", correct_data1, check_data1, $time);\n                \n\n            tb_data2 = `check_data2; \n            if(2'b00 === `macro_check_pointer_length) begin\n              check_data2[7:0] = tb_data2[7:0];\n              correct_data2[7:0] = u_pipeline.WB_Final_data2[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:8] = {24{tb_data2[7]}};\n                correct_data2[31:8] = u_pipeline.WB_Final_data2[31:8];\n              end begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end \n            end else if(2'b01 === `macro_check_pointer_length) begin\n              check_data2[15:0] = tb_data2[15:0];\n              correct_data2[15:0] = u_pipeline.WB_Final_data2[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_data2[31:16] = {16{tb_data2[15]}};;\n                correct_data2[31:16] = u_pipeline.WB_Final_data2[31:16];\n              end else begin \n                check_data2[31:8] = 0;\n                correct_data2[31:8] = 0;\n              end\n            end else if(2'b10 === `macro_check_pointer_length) begin\n              check_data2 = tb_data2; \n              correct_data2 = u_pipeline.WB_Final_data2;\n            end else begin \n\n            end\n            if(1'b1 === `if_check_data2) begin\n              if(correct_data2 !== check_data2) begin \n                $display(\"Error: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                error <= 1;\n              end\n            end \n            $display(\"Force: WB_Final_data2 is: %h, but needs to be: %h at time: %d\", correct_data2, check_data2, $time);\n                \n\n            if(1'b1 === `if_check_data3) begin\n              if(u_pipeline.WB_Final_data3 !== `check_data3) begin \n                $display(\"Error: WB_Final_data3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_data3, `check_data3, $time);\n                error <= 1;\n              end\n            end \n\n            if(1'b1 === `if_check_dr1) begin\n              if(u_pipeline.WB_Final_DR1 !== `check_dr1) begin \n                $display(\"Error: WB_Final_DR1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR1, `check_dr1, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr2) begin\n              if(u_pipeline.WB_Final_DR2 !== `check_dr2) begin \n                $display(\"Error: WB_Final_DR2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR2, `check_dr2, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_dr3) begin\n              if(u_pipeline.WB_Final_DR3 !== `check_dr3) begin \n                $display(\"Error: WB_Final_DR3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_DR3, `check_dr3, $time);\n                error <= 1;\n              end\n            end\n            \n            if(u_pipeline.WB_Final_ld_gpr1 !== `check_ld_gpr1) begin \n              $display(\"Error: WB_Final_ld_gpr1 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr1, `check_ld_gpr1, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr2 !== `check_ld_gpr2) begin \n              $display(\"Error: WB_Final_ld_gpr2 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr2, `check_ld_gpr2, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_gpr3 !== `check_ld_gpr3) begin \n              $display(\"Error: WB_Final_ld_gpr3 is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_gpr3, `check_ld_gpr3, $time);\n              error <= 1;\n            end\n\n            if(1'b1 === `check_ld_gpr3) begin \n              if(u_pipeline.WB_Final_DR3_datasize !== 2'b10) begin \n                $display(\"Error: WB_Final_DR3_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, 2'b10, $time);\n                error <= 1;\n              end \n            end\n\n            if(1'b1 === `if_check_flags) begin\n              if(u_pipeline.WB_Final_Flags !== ((`default_flags & (~`flags_affected)) + `produced_flags)) begin \n                $display(\"Error: WB_Final_Flags is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Flags, (`default_flags & (~`flags_affected)) + `produced_flags, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_datasize) begin\n              if(u_pipeline.WB_Final_datasize !== `check_datasize) begin \n                $display(\"Error: WB_Final_datasize is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_datasize, `check_datasize, $time);\n                error <= 1;\n              end\n            end\n\n            if(1'b1 === `if_check_mm_data) begin \n              if(u_pipeline.WB_Final_MM_Data !== `check_mm_data) begin \n                $display(\"Error: WB_Final_MM_Data is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_MM_Data, `check_mm_data, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b0 === `which_check_eip) begin \n              if(u_pipeline.WB_Final_EIP !== `default_eip + instr_length) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `default_eip + instr_length, $time);\n                error <= 1; \n              end\n            end else begin\n              if(u_pipeline.WB_Final_EIP !== `taken_eip) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_EIP, `taken_eip, $time);\n                error <= 1; \n              end\n            end\n\n            if(1'b1 === `if_check_cs) begin \n              if(u_pipeline.WB_Final_CS !== `check_cs) begin \n                $display(\"Error: WB_Final_EIP is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_CS, `check_cs, $time);\n                error <= 1; \n              end\n            end\n\n            if(u_pipeline.WB_Final_ld_mm !== `check_ld_mm) begin \n              $display(\"Error: WB_Final_ld_mm is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_mm, `check_ld_mm, $time);\n              error <= 1;\n            end\n\n           if(u_pipeline.WB_Final_ld_eip !== `check_ld_eip) begin \n              $display(\"Error: WB_Final_ld_eip is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_eip, `check_ld_eip, $time);\n              error <= 1;\n            end\n\n            if(u_pipeline.WB_Final_ld_cs !== `check_ld_cs) begin \n              $display(\"Error: WB_Final_ld_cs is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_ld_cs, `check_ld_cs, $time);\n              error <= 1;\n            end\n\n            tb_dcache_data = `check_dcache_data; \n            if(2'b00 === `macro_check_length) begin\n              check_dcache_data[7:0] = tb_dcache_data[7:0];\n              correct_dcache_data[7:0] = u_pipeline.WB_Final_Dcache_Data[7:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:8] = {56{tb_dcache_data[7]}};\n                correct_dcache_data[63:8] = u_pipeline.WB_Final_Dcache_Data[63:8];\n              end else begin\n                check_dcache_data[63:8] = 0;\n                correct_dcache_data[63:8] = 0;\n              end\n            end else if(2'b01 === `macro_check_length) begin\n              check_dcache_data[15:0] = tb_dcache_data[15:0];\n              correct_dcache_data[15:0] = u_pipeline.WB_Final_Dcache_Data[15:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:16] = {48{tb_dcache_data[15]}};\n                correct_dcache_data[63:16] = u_pipeline.WB_Final_Dcache_Data[63:16];\n              end else begin\n                check_dcache_data[63:16] = 0;\n                correct_dcache_data[63:16] = 0;\n              end \n            end else if(2'b10 === `macro_check_length) begin\n              check_dcache_data[31:0] = tb_dcache_data[31:0];\n              correct_dcache_data[31:0] = u_pipeline.WB_Final_Dcache_Data[31:0];\n              if(1'b1 === `macro_sign_extend) begin\n                check_dcache_data[63:32] = {32{tb_dcache_data[31]}};\n                correct_dcache_data[63:32] = u_pipeline.WB_Final_Dcache_Data[63:32];\n              end else begin\n                check_dcache_data[63:32] = 0;\n                correct_dcache_data[63:32] = 0;\n              end \n            end else if(2'b11 === `macro_check_length) begin\n              check_dcache_data = tb_dcache_data;\n              correct_dcache_data = u_pipeline.WB_Final_Dcache_Data;\n            end\n            if(1'b1 === `if_check_dcachedata) begin\n              if(correct_dcache_data !== check_dcache_data) begin \n                $display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h at time: %d\", correct_dcache_data, check_dcache_data, $time);\n                error <= 1;\n              end\n            end       \n\n            if(1'b1 === `if_check_address) begin\n              if(u_pipeline.WB_Final_Dcache_Address !== `check_address) begin \n                $display(\"Error: WB_Final_Dcache_Address is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Address, `check_address, $time);\n                error <= 1;\n                $display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);\n                $display(\"Debug: default_reg_whole_value << is : %h\", `default_reg_base_32);\n                $display(\"Debug: default_dis is: %h\", `default_big_endian_dis);\n              end\n            end\n\n            if(u_pipeline.WB_Final_Dcache_Write !== `check_ld_dcache) begin \n              $display(\"Error: WB_Final_Dcache_Write is: %h, but needs to be: %h at time: %d\", u_pipeline.WB_Final_Dcache_Write, `check_ld_dcache, $time);\n              error <= 1;\n            end\n\n\n\n        #5\n        if(error == 0) begin \n          $display(\"****************** Test Passed! ******************\");\n        end else begin\n          $display(\"****************** Test Failed! ******************\");\n        end\n        $fclose(file);\n        $finish;\n     end\n\n\n   initial begin\n       $vcdplusfile(\"pipeline.dump.vpd\");\n       $vcdpluson(0, TOP);\n   end\n\n    // Initializing the control store\n    initial begin\n        $readmemb(\"../../control_store/rom0_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom1.mem);\n        $readmemb(\"../../control_store/rom0_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom1.mem);\n        $readmemb(\"../../control_store/rom1_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom2.mem);\n        $readmemb(\"../../control_store/rom1_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom2.mem);\n        $readmemb(\"../../control_store/rom2_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom3.mem);\n        $readmemb(\"../../control_store/rom2_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom3.mem);\n        $readmemb(\"../../control_store/rom3_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom4.mem);\n        $readmemb(\"../../control_store/rom3_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom4.mem);\n        $readmemb(\"../../control_store/rom4_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom5.mem);\n        $readmemb(\"../../control_store/rom4_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom5.mem);\n        $readmemb(\"../../control_store/rom5_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom6.mem);\n        $readmemb(\"../../control_store/rom5_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom6.mem);\n        $readmemb(\"../../control_store/rom6_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom7.mem);\n        $readmemb(\"../../control_store/rom6_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom7.mem);\n        $readmemb(\"../../control_store/rom7_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom8.mem);\n        $readmemb(\"../../control_store/rom7_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom8.mem);\n        $readmemb(\"../../control_store/rom8_0.list\", u_pipeline.u_decode_stage2.u_ucontrol_store1.u_rom9.mem);\n        $readmemb(\"../../control_store/rom8_1.list\", u_pipeline.u_decode_stage2.u_ucontrol_store2.u_rom9.mem);\n    end\n   \nendmodule\n",
			"file": "pipeline/testMultipleUop/cmpsA7/pipeline_tb.v",
			"file_size": 58543,
			"file_write_time": 131701375223233502,
			"settings":
			{
				"buffer_size": 58517,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 119.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"package ",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Install Package Control"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/cmpsA6",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/repnecmpsF3A6",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/add00",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/add01"
	],
	"file_history":
	[
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/xchg87/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/repnecmpsA6/instruction_trace",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/iretdCF/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/writeback.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/interruptexception/instruction_trace",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/iretdCF/instruction_trace",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/cmpxchg0FB0equalSignextend/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/writeback_components/writeback_components.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/decode/ucontrol_store.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/cmpsA7/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/execute_components/shifter.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/failed_tests",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/xchg86/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/failed_tests",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/cmpsA6/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/add01/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/add02/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/add03/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/add04/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/add05/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/and20/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/and21/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/and22/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/and23/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/and24/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/and25/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/cldFC/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/daa27/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/hltF4/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/inc40/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/incFE/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/incFF/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/jmpE9/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/jmpEA/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/jmpEB/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/jmpFF/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/mov88/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/mov89/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/mov8A/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/mov8B/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/mov8C/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/mov8E/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/movB0/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/movB8/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/movC6/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/movC7/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/notF6/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/notF7/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/or08/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/or09/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/or0A/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/or0B/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/or0C/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/or0D/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salC0/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salC0dfby7/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salC1/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salC1operandoverride/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salD0/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salD1/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salD2/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salD3/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/sarC0/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/sarC1/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/sarC1operandoverride/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/sarD0/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/sarD1/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/sarD2/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/sarD3/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/stdFD/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/xchg96/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/call9A/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/callE8/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/callFF/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/callFFoperandoverride/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/cmovc0F42nottaken/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/cmovc0F42taken/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/cmpxchg0FB0equal/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/cmpxchg0FB1notequal/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/jnbe0F87taken/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/jnbe77nottaken/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/jnbe77taken/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/jne0F85taken/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/jne75nottaken/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/jne75taken/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/movq0F7FMem/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/movq0F7FReg/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/paddd0FFE/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/paddsw0FED/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/paddw0FFD/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pop07/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pop0FA1/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pop0FA9/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pop17/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pop1F/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pop58/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pop8F/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pshufw0F70/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push06/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push0E/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push0FA0/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push0FA8/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push16/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push1E/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push50/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push68/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/push6A/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/pushFF/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/retC2/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/retC3/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/retCA/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex/retCB/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/add00/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/cmpsA7/instruction_trace",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/common/basic_components/muxes.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/execute_components/execute_components.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/execute.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/common/functional_units/adder.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/decode/decode_stage2.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/common/functional_units/shift_components.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/common/functional_units/subtract.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salD0dfby7/pipeline_tb.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic/salC0dfby7/instruction_trace",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/pipeline.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/common/basic_components/equality.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/execute_components/alu.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/common/flags/eflags.v",
		"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/cmpxchg0FB0equal/pipeline_tb.v"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 110.0,
		"where_history":
		[
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop,/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testMultipleUop/cmpsA6",
			"",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex",
			"",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleBasic",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/testSingleComplex",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/test",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/test,/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/test/add01",
			"/Users/jiahanliu/Documents/School/EE382N/lc86v0/pipeline/test",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"u_pipeline.u_writeback.u_flags_wb.overwrite_ld_flags = 1'b0;",
			"Force",
			"alu_result",
			"alu_results",
			"produced_flags",
			"check_flags",
			"overwrite",
			"check_opA_uop1",
			"if_check_op_a",
			"if(1'b1 === tb_data1) begin",
			"WB_Final_data1",
			"if(1'b1 === `macro_check_length) begin",
			"v_cs_ld_eip",
			"WB_Final_ld_eip",
			"at time: %h",
			"clk_cycle",
			"force",
			"DE_CS_IN",
			"`define default_MM_EX_B_64 (`default_reg_EX_B_32 + `default_reg_EX_B_32 << 32)",
			"MM",
			"mm",
			"        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = (`default_reg_base_macro + 7;",
			"default_big_endian_imm32",
			"not32_1",
			"u_pipeline.u_register_file.segr_cs.Q = `default_cs;",
			"u_pipeline.u_register_file.eip.Q = `default_eip;",
			"$display(\"Error: EX_B is: %h, but needs to be: %h\", u_pipeline.EX_MM_B, `check_opMMB);",
			"$display(\"Error: EX_A is: %h, but needs to be: %h\", u_pipeline.EX_MM_A, `check_opMMA);",
			"if_check_op_mm_a",
			"CS-in",
			"memor",
			"1a",
			"DEP_v_wb_ld_gpr1",
			"default_reg_base_32",
			"$display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", check_dcache_data, correct_dcache_data);",
			"$display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);",
			"if(1'b1 === `check_ld_gpr3) begin ",
			"if(1'b1 === `check_ld_gpr3) begin",
			"WB_Final_DR3_datasize",
			"define check_dcache_data",
			"check_dcache_data",
			"decode",
			"../../control_storerom",
			"vcs -full64 -debug_all -f master",
			"control_store/",
			"if_check_dca",
			"if_check",
			"$display(\"Error: EX_B is: %h, but needs to be: %h\", u_pipeline.EX_MM_B, check_opMMB);",
			"$display(\"Error: EX_A is: %h, but needs to be: %h\", u_pipeline.EX_MM_A, check_opMMA);",
			"check_ld_eip",
			"`check_dcache_data",
			"if(1'b1 === if_check_alu_result) begin",
			"D2_UOP_STALL_OUT",
			"WB_RESULT_B",
			"default_rel_value",
			"$display(\"Debug: default_cs << 16 is: %h\", `default_cs << 16);",
			"`define check_address ((`default_cs << 16) + (`default_reg_base_32 + `default_big_endian_dis))",
			"`define default_cs 32'h22 ",
			"SEG1_DATA",
			"../../common/basic",
			"if_rel_eip",
			"if(1'b1 === if_rel_eip) begin",
			"if(1'b1 === if_rel_eip)",
			"if(1'b1 === if_rel_eip) begin",
			"if_rel_eip"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"if(1'b1 === `if_check_data1) begin",
			"if(1'b1 === `macro_sign_extend) begin",
			"at time: %d",
			"`define default_MM_EX_B_64 (`default_reg_EX_B_32 + (`default_reg_EX_B_32 << 32))",
			"        u_pipeline.u_register_file.mmr.regfilelo.regfilelo.regfilelo.mem_array[7] = (`default_reg_base_macro + 7);",
			"u_pipeline.debug_cs_in = `default_cs;",
			"u_pipeline.debug_eip_in = `default_eip;",
			"$display(\"Error: EX_MM_B is: %h, but needs to be: %h\", u_pipeline.EX_MM_B, `check_opMMB);",
			"$display(\"Error: EX_MM_A is: %h, but needs to be: %h\", u_pipeline.EX_MM_A, `check_opMMA);",
			"$display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", correct_dcache_data, check_dcache_data);",
			"$display(\"Error: WB_Final_Dcache_Data is: %h, but needs to be: %h\", check_dcache_data, correct_dcache_data);",
			"../../control_store/rom",
			"vcs -full64 -debug_all -f master +incdir+../../",
			"vcs -full64 -debug_all -f master +incdir+../../\nvcs -full64 -debug_all -f master +incdir+../../\nvcs -full64 -debug_all -f master +incdir+../../",
			"../../control_store",
			"$display(\"Error: EX_B is: %h, but needs to be: %h\", u_pipeline.EX_MM_B, `check_opMMB);",
			"$display(\"Error: EX_A is: %h, but needs to be: %h\", u_pipeline.EX_MM_A, `check_opMMA);",
			"if(1'b1 === `if_check_alu_result) begin",
			"$display(\"Debug: default_ss << 16 is: %h\", `default_ss << 16);",
			"`define check_address ((`default_ss << 16) + (`default_reg_base_32 + `default_big_endian_dis))",
			"`define default_cs 32'h22 \n`define default_ss ((`default_reg_base_macro + 3'b010) + ((`default_reg_base_macro + 3'b010) << 8))",
			"if(1'b1 === `if_rel_eip) begin",
			"`if_rel_eip"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pipeline/testMultipleUop/interruptexception/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 57601,
						"regions":
						{
						},
						"selection":
						[
							[
								658,
								658
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pipeline/testMultipleUop/iretdCF/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 57429,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pipeline/testMultipleUop/repnecmpsF3A6/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58517,
						"regions":
						{
						},
						"selection":
						[
							[
								33894,
								33894
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14236.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pipeline/testSingleBasic/add00/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49356,
						"regions":
						{
						},
						"selection":
						[
							[
								15472,
								15412
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5492.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pipeline/testSingleBasic/add01/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49329,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5392.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pipeline/testSingleBasic/add02/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49368,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "pipeline/testSingleBasic/add03/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49368,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "pipeline/testSingleBasic/add04/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49396,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pipeline/testSingleBasic/add05/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49394,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "pipeline/testSingleBasic/and20/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49329,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "pipeline/testSingleBasic/and21/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49329,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "pipeline/testSingleBasic/and22/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49368,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "pipeline/testSingleBasic/and23/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49368,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "pipeline/testSingleBasic/and24/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49393,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "pipeline/testSingleBasic/and25/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49394,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "pipeline/testSingleBasic/cldFC/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49394,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "pipeline/testSingleBasic/daa27/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49373,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "pipeline/testSingleBasic/hltF4/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49595,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "pipeline/testSingleBasic/inc40/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49337,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "pipeline/testSingleBasic/incFE/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49315,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "pipeline/testSingleBasic/incFF/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49315,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "pipeline/testSingleBasic/jmpE9/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49838,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "pipeline/testSingleBasic/jmpEA/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49841,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "pipeline/testSingleBasic/jmpEB/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49830,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "pipeline/testSingleBasic/jmpFF/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49837,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "pipeline/testSingleBasic/mov88/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49318,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "pipeline/testSingleBasic/mov89/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49317,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "pipeline/testSingleBasic/mov8A/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49341,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "pipeline/testSingleBasic/mov8B/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49341,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "pipeline/testSingleBasic/mov8C/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49343,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "pipeline/testSingleBasic/mov8E/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49365,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "pipeline/testSingleBasic/movB0/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49399,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "pipeline/testSingleBasic/movB8/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49400,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "pipeline/testSingleBasic/movC6/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49386,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "pipeline/testSingleBasic/movC7/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49387,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "pipeline/testSingleBasic/notF6/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49317,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "pipeline/testSingleBasic/notF7/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49317,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "pipeline/testSingleBasic/or08/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49329,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "pipeline/testSingleBasic/or09/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49329,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "pipeline/testSingleBasic/or0A/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49368,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "pipeline/testSingleBasic/or0B/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49368,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "pipeline/testSingleBasic/or0C/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49393,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "pipeline/testSingleBasic/or0D/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49394,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "pipeline/testSingleBasic/salC0/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49334,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "pipeline/testSingleBasic/salC0dfby7/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49334,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "pipeline/testSingleBasic/salC1/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49316,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "pipeline/testSingleBasic/salC1operandoverride/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49316,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "pipeline/testSingleBasic/salD0/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49315,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "pipeline/testSingleBasic/salD1/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49313,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "pipeline/testSingleBasic/salD2/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49337,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "pipeline/testSingleBasic/salD3/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49337,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "pipeline/testSingleBasic/sarC0/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49335,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "pipeline/testSingleBasic/sarC1/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49317,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "pipeline/testSingleBasic/sarC1operandoverride/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49317,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "pipeline/testSingleBasic/sarD0/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49316,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "pipeline/testSingleBasic/sarD1/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49313,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "pipeline/testSingleBasic/sarD2/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49338,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "pipeline/testSingleBasic/sarD3/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49338,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "pipeline/testSingleBasic/stdFD/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49394,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2461.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "pipeline/testSingleBasic/add00/run_pipeline",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 48,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "pipeline/testSingleBasic/xchg86/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49371,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5523.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "pipeline/testSingleBasic/xchg96/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49533,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "pipeline/testMultipleUop/cmpsA6/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58517,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "pipeline/testMultipleUop/cmpsA7/pipeline_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58517,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SystemVerilog/SystemVerilog.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 126.0
	},
	"pinned_build_system": "",
	"project": "kc86.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 317.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
