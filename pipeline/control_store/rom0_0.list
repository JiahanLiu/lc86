@04 // ADD AL,imm8 (0x04)
0100000000010010000000001010000001000000000000000000000010001000  // 0x401200A040000088
@05 // ADD (E)AX,imm (0x05)
0010000000010010000000001010000001000000000000000000000010001000  // 0x201200A040000088
@00 // ADD r/m8,r8 (0x00)
0100000000000000000000001100000000000000000000000000000010000000  // 0x400000C000000080
@01 // ADD r/m,r (16/32) (0x01)
0010000000000000000000001100000000000000000000000000000010000000  // 0x200000C000000080
@02 // ADD r8, r/m8 (0x02)
0100000000000000000000001100000000100000000000000000000000000110  // 0x400000C020000006
@03 // ADD r,r/m (16/32) (0x03)
0010000000000000000000001100000000100000000000000000000000000110  // 0x200000C020000006
@0c // OR AL,imm8 (0x0C)
0100000000010010000000001010000001000000000000000000000010001000  // 0x401200A040000088
@0d // OR (E)AX,imm (0x0D)
0010000000010010000000001010000001000000000000000000000010001000  // 0x201200A040000088
@08 // OR r/m8,r8 (0x08)
0100000000000000000000001100000000000000000000000000000010000000  // 0x400000C000000080
@09 // OR r/m,r (16/32) (0x09)
0010000000000000000000001100000000000000000000000000000010000000  // 0x200000C000000080
@0a // OR r8, r/m8 (0x0A)
0100000000000000000000001100000000100000000000000000000000000110  // 0x400000C020000006
@0b // OR r,r/m (16/32) (0x0B)
0010000000000000000000001100000000100000000000000000000000000110  // 0x200000C020000006
@19 // CALL r/m16/32 (0xFF /2)
0010011001000100001100001100100000000000100010000010000000000000  // 0x264430C800882000
@18 // INC r/m16/32 (0xFF /0)
0010000000000000000000001000000000000000000001000000000010000000  // 0x2000008000040080
@1a // JMP r/m16/32 (0xFF /4)
0010000000000100000000001000000000000000000000000010000000000000  // 0x2004008000002000
@1f // POP DS (0x1F)
0110011001011010111100000110100000000000001000000000000000101000  // 0x665AF06800200028
@07 // POP ES (0x07)
0110011001011010001100000110100000000000001000000000000000111000  // 0x665A306800200038
@17 // POP SS (0x17)
0110011001011010101100000110100000000000001000000000000000011000  // 0x665AB06800200018
@1b // PUSH r/m16/32 (0xFF /6)
0010011001000000001100001100100000000000100010000000000000000000  // 0x264030C800880000
@0e // PUSH CS (0x0E)
0110011001010010011100000111100110000000100010000000000000000000  // 0x6652707980880000
@16 // PUSH SS (0x16)
0110011001010010101100000111100010000000100010000000000000000000  // 0x6652B07880880000
@1e // PUSH DS (0x1E)
0110011001010010111100000111100010000000100010000000000000000000  // 0x6652F07880880000
@06 // PUSH ES (0x06)
0110011001010010001100000111100010000000100010000000000000000000  // 0x6652307880880000
@10 // INT/EXC (uop1) (push eflags) ()
1110011001010000001100000110100000000000100010000000000000000000  // 0xE650306800880000
@11 // INT/EXC (uop2) (push EIP/CS) ()
0111011001011000001100000110100000000001110010000011000000000000  // 0x7658306801C83000
@12 // INT/EXC (uop3) ()
000000000000000000000000000000000000000000000000000000  // 0x0
