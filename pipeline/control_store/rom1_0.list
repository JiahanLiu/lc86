@04 // AND AL,imm8 (0x24)
0100000000010010000000001010000001000000000000000000000001000100  // 0x401200A040000044
@05 // AND (E)AX,imm (0x25)
0010000000010010000000001010000001000000000000000000000001000100  // 0x201200A040000044
@00 // AND r/m8,r8 (0x20)
0100000000000000000000001100000000000000000000000000000001000000  // 0x400000C000000040
@01 // AND r/m,r (16/32) (0x21)
0010000000000000000000001100000000000000000000000000000001000000  // 0x200000C000000040
@02 // AND r8, r/m8 (0x22)
0100000000000000000000001100000000100000000000000000000000000011  // 0x400000C020000003
@03 // AND r,r/m (16/32) (0x23)
0010000000000000000000001100000000100000000000000000000000000011  // 0x200000C020000003
@07 // DAA (0x27)
0100000000010010000000001010000000000000000000000000000001000100  // 0x401200A000000044
@10 // IRETd (uop2) (pop eflags) (0xCF)
0110011001011000001100000110100000000011101000001000000000000000  // 0x6658306803A08000
@12 // CMPS m8,m8 uop2 (0x32)
0100111011011011111110101011000000000000000000100000010001110110  // 0x4EDBFAB000020476
@14 // REPNE m8,m8 uop2transient (0x34)
1100111011011011111110101011000000000000011000100000010101110110  // 0xCEDBFAB000620576
@15 // REPNE m8,m8 uop1steadytate (0x35)
1100111011011011100000000011000000000000011000100000101100000000  // 0xCEDB803000620B00
@16 // REPNE m8,m8 uop2steadystate (0x36)
1100111011011011111110100011000000000000011000100000011101110110  // 0xCEDBFA3000620776
@17 // CMPS m,m (16/32) uop2 (0x37)
0010111011011011111110101011000000000000000000100000010001110110  // 0x2EDBFAB000020476
@19 // REPNE m,m (16/32) uop2transient (0x39)
1010111011011011111110101011000000000000011000100000010101110110  // 0xAEDBFAB000620576
@1a // REPNE m,m (16/32) uop1steadystate (0x3A)
1010111011011011100000000011000000000000011000100000101100000000  // 0xAEDB803000620B00
@1b // REPNE m,m (16/32) uop2steadystate (0x3B)
1010111011011011111110100011000000000000011000100000011101110110  // 0xAEDBFA3000620776
