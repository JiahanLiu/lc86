@04 // AND AL,imm8 (0x24)
0100000000010010000000001010000001000000000000000000000010001000  // 0x401200A040000088
@05 // AND (E)AX,imm (0x25)
0010000000010010000000001010000001000000000000000000000010001000  // 0x201200A040000088
@00 // AND r/m8,r8 (0x20)
0100000000000000000000001100000000000000000000000000000010000000  // 0x400000C000000080
@01 // AND r/m,r (16/32) (0x21)
0010000000000000000000001100000000000000000000000000000010000000  // 0x200000C000000080
@02 // AND r8, r/m8 (0x22)
0100000000000000000000001100000000100000000000000000000000000110  // 0x400000C020000006
@03 // AND r,r/m (16/32) (0x23)
0010000000000000000000001100000000100000000000000000000000000110  // 0x200000C020000006
@07 // DAA (0x27)
0100000000010010000000001010000000000000000000000000000010001000  // 0x401200A000000088
@10 // IRETd (uop2) (pop eflags) (0xCF)
0110011001011000001100000110100000000011101000001000000000000000  // 0x6658306803A08000
@12 // CMPS m8,m8 uop2 ()
0100111011011011111110101011000000000000000000100000010011101101  // 0x4EDBFAB0000204ED
@14 // REPNE m8,m8 uop2transient ()
1100111011011011111110101011000000000000011000100000010011101101  // 0xCEDBFAB0006204ED
@15 // REPNE m8,m8 uop1steadytate ()
1100111011011011100000000011000000000000011000100000101000000000  // 0xCEDB803000620A00
@16 // REPNE m8,m8 uop2steadystate ()
1100111011011011111110100011000000000000011000100000011011101101  // 0xCEDBFA30006206ED
@17 // CMPS m,m (16/32) uop2 ()
0010111011011011111110101011000000000000000000100000010011101101  // 0x2EDBFAB0000204ED
@19 // REPNE m,m (16/32) uop2transient ()
1010111011011011111110101011000000000000011000100000010011101101  // 0xAEDBFAB0006204ED
@1a // REPNE m,m (16/32) uop1steadystate ()
1010111011011011100000000011000000000000011000100000101000000000  // 0xAEDB803000620A00
@1b // REPNE m,m (16/32) uop2steadystate ()
1010111011011011111110100011000000000000011000100000011011101101  // 0xAEDBFA30006206ED
