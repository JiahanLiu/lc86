@04 // AND AL,imm8 (0x24)
0000010000100111000000000000100000101011111000000000000000000000  // 0x42700082BE00000
@05 // AND (E)AX,imm (0x25)
0000010000100111000000000000100000101011111000000000000000000000  // 0x42700082BE00000
@00 // AND r/m8,r8 (0x20)
0000100000100111000000000000100000101011111000000000000000000000  // 0x82700082BE00000
@01 // AND r/m,r (16/32) (0x21)
0000100000100111000000000000100000101011111000000000000000000000  // 0x82700082BE00000
@02 // AND r8, r/m8 (0x22)
0000010000100111000000000000100000101011111000000000000000000000  // 0x42700082BE00000
@03 // AND r,r/m (16/32) (0x23)
0000010000100111000000000000100000101011111000000000000000000000  // 0x42700082BE00000
@07 // DAA (0x27)
0000010000011111000000000000100000101011111000000000000000000000  // 0x41F00082BE00000
@10 // IRETd (uop2) (pop eflags) (0xCF)
0000011100000100011000011100110000100000000000000000000000000000  // 0x70461CC20000000
@12 // CMPS m8,m8 uop2 (0x32)
1111010000110101000100000000100000101011111000000000000000000000  // 0xF43510082BE00000
@14 // REPNE m8,m8 uop2transient (0x34)
1111011001110101000100000000000000101011111101101010000000000000  // 0xF67510002BF6A000
@15 // REPNE m8,m8 uop1steadytate (0x35)
0000010000000100100100000000000000000000000101101100000000000000  // 0x40490000016C000
@16 // REPNE m8,m8 uop2steadystate (0x36)
1111011001110101000100000000000000101011111101101010000000000000  // 0xF67510002BF6A000
@17 // CMPS m,m (16/32) uop2 (0x37)
1111010001110101000100000000100000101011111000000000000000000000  // 0xF47510082BE00000
@19 // REPNE m,m (16/32) uop2transient (0x39)
1111011001110101000100000000000000101011111101110100000000000000  // 0xF67510002BF74000
@1a // REPNE m,m (16/32) uop1steadystate (0x3A)
0000010000000100100100000000000000000000000101110110000000000000  // 0x404900000176000
@1b // REPNE m,m (16/32) uop2steadystate (0x3B)
1111011001110101000100000000000000101011111101110100000000000000  // 0xF67510002BF74000
