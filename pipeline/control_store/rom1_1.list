@04 // AND AL,imm8 (0x24)
0000100001001110000000000001000001010101110000000000000000000000  // 0x84E001055C00000
@05 // AND (E)AX,imm (0x25)
0000100001001110000000000001000001010101110000000000000000000000  // 0x84E001055C00000
@00 // AND r/m8,r8 (0x20)
0001000001001110000000000001000001010101110000000000000000000000  // 0x104E001055C00000
@01 // AND r/m,r (16/32) (0x21)
0001000001001110000000000001000001010101110000000000000000000000  // 0x104E001055C00000
@02 // AND r8, r/m8 (0x22)
0000100001001110000000000001000001010101110000000000000000000000  // 0x84E001055C00000
@03 // AND r,r/m (16/32) (0x23)
0000100001001110000000000001000001010101110000000000000000000000  // 0x84E001055C00000
@07 // DAA (0x27)
0000100000111110000000000001000001010111110000000000000000000000  // 0x83E001057C00000
@10 // IRETd (uop2) (pop eflags) (0xCF)
0000111000001000000000100000000001000000001000000000000000000000  // 0xE08020040200000
@11 // IRETd (uop3) (0xCF)
0000111000001000110000011001100001000000000000000000000000000000  // 0xE08C19840000000
@12 // CMPS m8,m8 uop2 ()
1110100011101010001000000001000001010111110000000000000000000000  // 0xE8EA201057C00000
@14 // REPNE m8,m8 uop2transient ()
1110110011101010000000000000000001010111111011010100000000000000  // 0xECEA000057ED4000
@15 // REPNE m8,m8 uop1steadytate ()
0000100000001001000000000000000000000000001011011000000000000000  // 0x8090000002D8000
@16 // REPNE m8,m8 uop2steadystate ()
1110110011101010000000000000000001010111111011010100000000000000  // 0xECEA000057ED4000
@17 // CMPS m,m (16/32) uop2 ()
1110100011101010001000000001000001010111110000000000000000000000  // 0xE8EA201057C00000
@19 // REPNE m,m (16/32) uop2transient ()
1110110011101010000000000000000001010111111100000000000000000000  // 0xECEA000057F00000
@1a // REPNE m,m (16/32) uop1steadystate ()
0000100000001001000000000000000000000000001100000000000000000000  // 0x809000000300000
@1b // REPNE m,m (16/32) uop2steadystate ()
1110110011101010000000000000000001010111111100000000000000000000  // 0xECEA000057F00000
