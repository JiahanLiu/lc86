@04 // AND AL,imm8 (0x24)
0000100001001110000000000010000010101011100000000000000000000000  // 0x84E0020AB800000
@05 // AND (E)AX,imm (0x25)
0000100001001110000000000010000010101011100000000000000000000000  // 0x84E0020AB800000
@00 // AND r/m8,r8 (0x20)
0001000001001110000000000010000010101011100000000000000000000000  // 0x104E0020AB800000
@01 // AND r/m,r (16/32) (0x21)
0001000001001110000000000010000010101011100000000000000000000000  // 0x104E0020AB800000
@02 // AND r8, r/m8 (0x22)
0000100001001110000000000010000010101011100000000000000000000000  // 0x84E0020AB800000
@03 // AND r,r/m (16/32) (0x23)
0000100001001110000000000010000010101011100000000000000000000000  // 0x84E0020AB800000
@07 // DAA (0x27)
0000100000111110000000000010000010101111100000000000000000000000  // 0x83E0020AF800000
@10 // IRETd (uop2) (pop eflags) (0xCF)
0000111000001000000001000000000010000000010000000000000000000000  // 0xE08040080400000
@11 // IRETd (uop3) (0xCF)
0000111000001000110000110011000010000000000000000000000000000000  // 0xE08C33080000000
@12 // CMPS m8,m8 uop2 ()
1110100011101010000000000010000010101111100000000000000000000000  // 0xE8EA0020AF800000
@14 // REPNE m8,m8 uop2transient ()
1110110011101010000000000000000010101111110110101000000000000000  // 0xECEA0000AFDA8000
@15 // REPNE m8,m8 uop1steadytate ()
0000100000001001000000000000000000000000010110110000000000000000  // 0x8090000005B0000
@16 // REPNE m8,m8 uop2steadystate ()
1110110011101010000000000000000010101111110110101000000000000000  // 0xECEA0000AFDA8000
@17 // CMPS m,m (16/32) uop2 ()
1110100011101010000000000010000010101111100000000000000000000000  // 0xE8EA0020AF800000
@19 // REPNE m,m (16/32) uop2transient ()
1110110011101010000000000000000010101111111000000000000000000000  // 0xECEA0000AFE00000
@1a // REPNE m,m (16/32) uop1steadystate ()
0000100000001001000000000000000000000000011000000000000000000000  // 0x809000000600000
@1b // REPNE m,m (16/32) uop2steadystate ()
1110110011101010000000000000000010101111111000000000000000000000  // 0xECEA0000AFE00000
